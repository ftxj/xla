[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = int
dispatch_key = Batched
singature = long (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_batch_dim, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_remove_batch_dim, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_same_storage_numel, overload_name =
dispatch_key = Batched
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_same_size, overload_name =
dispatch_key = Batched
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_new_zeros_with_same_feature_meta, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_complex, overload_name =
dispatch_key = Batched
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = Batched
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chunk, overload_name =
dispatch_key = Batched
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = sections
dispatch_key = Batched
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = indices
dispatch_key = Batched
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name = SymInt
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_as, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = intlist
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = int
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::numpy_T, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_H, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mT, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mH, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape_as, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = Batched
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = sizes
dispatch_key = Batched
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = Batched
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = Batched
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = device
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Device, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = other
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype_layout
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor_mode
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_mode
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Tensor
dispatch_key = Batched
singature = c10::ScalarType (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar
dispatch_key = Batched
singature = c10::ScalarType (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Tensor
dispatch_key = Batched
singature = c10::ScalarType (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Scalar
dispatch_key = Batched
singature = c10::ScalarType (c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::imag, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::real, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_conj, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_neg, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = Batched
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name =
dispatch_key = Batched
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_backward, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_backward, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace_backward, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_backward, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_empty, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_empty_strided, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_zeros, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::contiguous, overload_name =
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::MemoryFormat)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = Batched
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_physical, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_conj, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_neg, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = Tensor
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_Tensor
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_same_storage_numel, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name = out
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name = out
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name = out
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name = out
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name = U
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_as, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = intlist
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = Dimname
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = Dimname
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::real, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::imag, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = Dimname
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = Dimname
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chunk, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = array
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = array
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = array
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unsafe_view, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = out
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full_like, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = Dimname
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = int
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = Dimname
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_complex, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_floating_point, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::requires_grad_, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = Conjugate
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lift, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = p
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy_, overload_name =
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric_, overload_name =
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal_, overload_name =
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name = out
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float_out
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor_out
dispatch_key = VmapMode
singature = at::Tensor& (double, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor
dispatch_key = VmapMode
singature = at::Tensor (double, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor_out
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float
dispatch_key = VmapMode
singature = at::Tensor (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float_out
dispatch_key = VmapMode
singature = at::Tensor& (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::poisson, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand_like, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn_like, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint_like, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint_like, overload_name = low_dtype
dispatch_key = VmapMode
singature = at::Tensor (at::Tensor const&, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator
dispatch_key = VmapMode
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = names
dispatch_key = VmapMode
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_with_names
dispatch_key = VmapMode
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = out
dispatch_key = VmapMode
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_out
dispatch_key = VmapMode
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator
dispatch_key = VmapMode
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = names
dispatch_key = VmapMode
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_with_names
dispatch_key = VmapMode
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = out
dispatch_key = VmapMode
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_out
dispatch_key = VmapMode
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator
dispatch_key = VmapMode
singature = at::Tensor (long, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = out
dispatch_key = VmapMode
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator_out
dispatch_key = VmapMode
singature = at::Tensor& (long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name =
dispatch_key = VmapMode
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator
dispatch_key = VmapMode
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low
dispatch_key = VmapMode
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator
dispatch_key = VmapMode
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = out
dispatch_key = VmapMode
singature = at::Tensor& (long, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator_out
dispatch_key = VmapMode
singature = at::Tensor& (long, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_out
dispatch_key = VmapMode
singature = at::Tensor& (long, long, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator_out
dispatch_key = VmapMode
singature = at::Tensor& (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = VmapMode
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros_like, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_as, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = intlist
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = Dimname
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = Dimname
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::real, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::imag, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = Dimname
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = Dimname
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chunk, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = array
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = array
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = array
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unsafe_view, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = out
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full_like, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = Dimname
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = int
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = Dimname
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_complex, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_floating_point, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::requires_grad_, overload_name =
dispatch_key = ZeroTensor
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name = deprecated
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv1d, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv2d, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv3d, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_tbc, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose1d, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose2d, overload_name = input
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose3d, overload_name = input
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool, bool)     
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution_transpose, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::einsum, overload_name =
dispatch_key = Autocast
singature = at::Tensor (c10::basic_string_view<char>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linear, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chain_matmul, overload_name =
dispatch_key = Autocast
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_multi_dot, overload_name =
dispatch_key = Autocast
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_lstm_cell, overload_name =
dispatch_key = Autocast
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_gru_cell, overload_name =
dispatch_key = Autocast
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm_cell, overload_name =
dispatch_key = Autocast
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru_cell, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh_cell, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu_cell, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = Autocast
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::layer_norm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, bool)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm, overload_name =
dispatch_key = Autocast
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::group_norm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name = dim
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = dim
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosine_similarity, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::poisson_nll_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosine_embedding_loss, overload_name = 
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hinge_embedding_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::margin_ranking_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triplet_margin_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, double, double, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_with_logits, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dist, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pdist, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cdist, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_Dimname
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Dimname, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = Dimname
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = Dimname
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_DimnameList
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = Scalar
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_ScalarOpt_dim
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = 
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bilinear, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name =
dispatch_key = Autocast
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv1d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv2d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv3d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linear, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name = deprecated
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_tbc, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose1d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose2d, overload_name = input
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose3d, overload_name = input
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_Dimname
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Dimname, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = scalar
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = scalar
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stft, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, c10::optional<bool>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stft, overload_name = center
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, c10::basic_string_view<char>, bool, c10::optional<bool>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cdist, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_2d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_grid_sampler_2d_cpu_fallback, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_3d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_rank, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::orgqr, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pinverse, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ctc_loss, overload_name = IntList
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ctc_loss, overload_name = Tensor
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft2, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft2, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftn, overload_name = 
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftn, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft2, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft2, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftn, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfftn, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = str_ord
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = p_str
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = tol_tensor
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_tensor
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_float
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svdvals, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvals, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorinv, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorsolve, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, double, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_lu_with_info, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name =
dispatch_key = AutocastCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name =
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = dimname
dispatch_key = AutocastCPU
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cdist_forward, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_dropout, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_dropout, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_local_scalar_dense, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_copy, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_as, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_tensors, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_to, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_to, overload_name = ellipsis_idx
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name = 
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = names
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = names_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cdist, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chunk, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::contiguous, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = dimname_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = dimname_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dropout, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dropout_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::equal, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = DimnameList
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = named_out_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = using_ints
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = using_names
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full_like, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::imag, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = Dimname_Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = Dimname_Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = Dimname_Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = Dimname_Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_coalesced, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_complex, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_floating_point, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_inference, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_nonzero, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_pinned, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_same_size, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_signed, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isfinite, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isinf, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isnan, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::item, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = dimname_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = values
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal_, overload_name = 
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = dimname_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = names
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = names_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim_max
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = names_dim_max
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool1d, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool1d_with_indices, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = names_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim_values
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = names_dim_values
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim_values
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = names_dim_values
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim_min
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = names_dim_min
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = dimname_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = values
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones_like, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::output_nr, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = Dimname_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = int_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand_like, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn_like, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::real, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::refine_names, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rename, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rename_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = names_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_names
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_names_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction_names
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = DimnameList_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = IntList_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_DimnameList
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = indices
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = sections
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = tensor_indices_or_sections
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = device
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype_layout
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide_, overload_name = Scalar
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide_, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = Dimname
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = int
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_chunk, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_split, overload_name = Tensor
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_split_with_sizes, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vander, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = names_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_names
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_names_out
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = names_dim
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction_names
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros_like, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_backward, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_data, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::data, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_leaf, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_version, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::requires_grad_, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::retain_grad, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual, overload_name =
dispatch_key = Named
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_neg, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_conj, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = Tensor
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_Tensor
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_same_storage_numel, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name = out
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name = U
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_as, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = intlist
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = Dimname
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = Dimname
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::real, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::imag, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = Dimname
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = Dimname
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chunk, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = array
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = array
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = array
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unsafe_view, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = out
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full_like, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = Dimname
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = int
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = Dimname
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_complex, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_floating_point, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::requires_grad_, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = Negative
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_lstm.input(Tensor input, Tensor[] hx, __torch__.torch.classes.rnn.CellParamsBase[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, 
Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, __torch__.torch.classes.rnn.CellParamsBase[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, 
Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_lstm.input_legacy(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_lstm.data_legacy(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_gru.input(Tensor input, Tensor hx, __torch__.torch.classes.rnn.CellParamsBase[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, __torch__.torch.classes.rnn.CellParamsBase[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_gru.input_legacy(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, 
float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_gru.data_legacy(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::make_quantized_cell_params_dynamic(__torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor bias_ih, Tensor bias_hh, bool reduce_range=False) -> (__torch__.torch.classes.rnn.CellParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::make_quantized_cell_params_fp16(__torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh) -> (__torch__.torch.classes.rnn.CellParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::make_quantized_cell_params(Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh) -> (__torch__.torch.classes.rnn.CellParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::quantized_lstm_cell_dynamic(Tensor input, Tensor[] hx, __torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor bias_ih, Tensor bias_hh) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::quantized_gru_cell_dynamic(Tensor input, Tensor hx, __torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor b_ih, Tensor b_hh) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::quantized_rnn_relu_cell_dynamic(Tensor input, Tensor hx, __torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor b_ih, Tensor b_hh) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::quantized_rnn_tanh_cell_dynamic(Tensor input, Tensor hx, __torch__.torch.classes.quantized.LinearPackedParamsBase w_ih, __torch__.torch.classes.quantized.LinearPackedParamsBase w_hh, Tensor b_ih, Tensor b_hh) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_lstm, overload_name = input
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::List<at::Tensor>, c10::List<c10::intrusive_ptr<at::native::(anonymous namespace)::CellParamsBase, c10::detail::intrusive_target_default_null_type<at::native::(anonymous namespace)::CellParamsBase> > >, bool, long, double, 
bool, bool, bool, c10::optional<c10::ScalarType>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_lstm, overload_name = data
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::List<at::Tensor>, c10::List<c10::intrusive_ptr<at::native::(anonymous namespace)::CellParamsBase, c10::detail::intrusive_target_default_null_type<at::native::(anonymous namespace)::CellParamsBase> > >, bool, long, double, bool, bool, c10::optional<c10::ScalarType>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_lstm, overload_name = input_legacy
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::List<at::Tensor>, c10::List<at::Tensor>, bool, long, double, bool, bool, bool, c10::optional<c10::ScalarType>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_lstm, overload_name = data_legacy
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::List<at::Tensor>, c10::List<at::Tensor>, bool, long, double, bool, bool, c10::optional<c10::ScalarType>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_gru, overload_name = input
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::List<c10::intrusive_ptr<at::native::(anonymous namespace)::CellParamsBase, c10::detail::intrusive_target_default_null_type<at::native::(anonymous namespace)::CellParamsBase> > >, bool, long, double, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_gru, overload_name = data
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::List<c10::intrusive_ptr<at::native::(anonymous namespace)::CellParamsBase, c10::detail::intrusive_target_default_null_type<at::native::(anonymous namespace)::CellParamsBase> > >, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_gru, overload_name = input_legacy
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::List<at::Tensor>, bool, long, double, bool, bool, bool)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_gru, overload_name = data_legacy
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::List<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::make_quantized_cell_params_dynamic, overload_name =
dispatch_key = CPU
singature = c10::intrusive_ptr<at::native::(anonymous namespace)::CellParamsBase, c10::detail::intrusive_target_default_null_type<at::native::(anonymous 
namespace)::CellParamsBase> > (c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, at::Tensor, at::Tensor, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::make_quantized_cell_params, overload_name =
dispatch_key = CPU
singature = c10::intrusive_ptr<at::native::(anonymous namespace)::CellParamsBase, c10::detail::intrusive_target_default_null_type<at::native::(anonymous 
namespace)::CellParamsBase> > (at::Tensor const&, at::Tensor const&, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::quantized_lstm_cell_dynamic, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::quantized_gru_cell_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::quantized_rnn_relu_cell_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::quantized_rnn_tanh_cell_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::make_quantized_cell_params_fp16, overload_name =
singature = c10::intrusive_ptr<at::native::(anonymous namespace)::CellParamsBase, c10::detail::intrusive_target_default_null_type<at::native::(anonymous 
namespace)::CellParamsBase> > (c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> >)
[FTXJ LOG] Dispatcher::registerDef, schema = sparse::qlinear(Tensor X, __torch__.torch.classes.sparse.LinearPackedParamsBase W_prepack, float Y_scale_i, 
int Y_zero_point_i) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = sparse::qlinear_relu(Tensor X, __torch__.torch.classes.sparse.LinearPackedParamsBase W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = sparse::qlinear_dynamic(Tensor X, __torch__.torch.classes.sparse.LinearPackedParamsBase W_prepack) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = sparse::qlinear_relu_dynamic(Tensor X, __torch__.torch.classes.sparse.LinearPackedParamsBase W_prepack) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = sparse::qlinear_prepack(Tensor W, Tensor? B, int out_features_block_size, int in_features_block_size) -> (__torch__.torch.classes.sparse.LinearPackedParamsBase W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = sparse::qlinear_unpack(__torch__.torch.classes.sparse.LinearPackedParamsBase W_prepack) -> (Tensor W_origin, Tensor? B_origin, int[] block_pattern)
[FTXJ LOG] Dispatcher::registerImpl, op_name = sparse::qlinear, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::intrusive_ptr<ao::sparse::LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<ao::sparse::LinearPackedParamsBase> > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = sparse::qlinear_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::intrusive_ptr<ao::sparse::LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<ao::sparse::LinearPackedParamsBase> > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = sparse::qlinear_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::intrusive_ptr<ao::sparse::LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<ao::sparse::LinearPackedParamsBase> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = sparse::qlinear_relu_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::intrusive_ptr<ao::sparse::LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<ao::sparse::LinearPackedParamsBase> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = sparse::qlinear_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ao::sparse::LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<ao::sparse::LinearPackedParamsBase> > 
(at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = sparse::qlinear_unpack, overload_name =
dispatch_key = QuantizedCPU
singature = std::tuple<at::Tensor, c10::optional<at::Tensor>, std::vector<long, std::allocator<long> > > (c10::intrusive_ptr<ao::sparse::LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<ao::sparse::LinearPackedParamsBase> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add, overload_name = Scalar2
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::Scalar, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_relu, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_relu, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_relu, overload_name = Scalar2
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::Scalar, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_relu, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_relu_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_scalar, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_scalar_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_scalar_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_scalar_relu_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_scalar, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_scalar_relu, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_scalar_out, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::add_scalar_relu_out, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::add, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::batch_norm, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, at::Tensor, at::Tensor, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::batch_norm_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, at::Tensor, at::Tensor, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::batch_norm1d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, at::Tensor, at::Tensor, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::batch_norm1d_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, at::Tensor, at::Tensor, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::batch_norm2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, at::Tensor, at::Tensor, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::batch_norm2d_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, at::Tensor, at::Tensor, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::batch_norm3d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, at::Tensor, at::Tensor, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::batch_norm3d_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, at::Tensor, at::Tensor, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::clamp, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::cat, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::List<at::Tensor> const&, long, c10::optional<double>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::cat_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::List<at::Tensor> const&, long, c10::optional<double>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::cat_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::List<at::Tensor> const&, long, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::cat_relu_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::List<at::Tensor> const&, long, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv1d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv1d_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d, overload_name = new
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_relu, overload_name = new
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d, overload_name = new
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_relu, overload_name = new
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, c10::List<long>, c10::List<long>, c10::List<long>, long, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, c10::List<long>, c10::List<long>, c10::List<long>, long, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&, c10::List<long>, c10::List<long>, c10::List<long>, long, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&, c10::List<long>, c10::List<long>, c10::List<long>, long, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose1d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv2d_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv_transpose1d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv_transpose2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv1d_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose1d_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv1d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose1d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv2d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv3d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv_transpose1d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv_transpose2d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::conv_transpose3d_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > (at::Tensor, c10::optional<at::Tensor>, c10::List<long>, c10::List<long>, c10::List<long>, c10::List<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::dropout, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, double, long, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::elu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, double, long, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::celu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, double, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_byte, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::intrusive_ptr<EmbeddingPackedParamsBase, c10::detail::intrusive_target_default_null_type<EmbeddingPackedParamsBase> > const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, long, bool, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_4bit, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::intrusive_ptr<EmbeddingPackedParamsBase, c10::detail::intrusive_target_default_null_type<EmbeddingPackedParamsBase> > const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, long, bool, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_byte, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::intrusive_ptr<EmbeddingPackedParamsBase, c10::detail::intrusive_target_default_null_type<EmbeddingPackedParamsBase> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_4bit, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::intrusive_ptr<EmbeddingPackedParamsBase, c10::detail::intrusive_target_default_null_type<EmbeddingPackedParamsBase> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_byte_rowwise_offsets, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, long, bool, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_4bit_rowwise_offsets, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, long, bool, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_2bit_rowwise_offsets, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, long, bool, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_byte_prepack, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_4bit_prepack, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, bool, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_2bit_prepack, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, bool, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<EmbeddingPackedParamsBase, c10::detail::intrusive_target_default_null_type<EmbeddingPackedParamsBase> > (at::Tensor)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_byte_unpack, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_4bit_unpack, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_2bit_unpack, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::embedding_bag_unpack, overload_name =
singature = at::Tensor (c10::intrusive_ptr<EmbeddingPackedParamsBase, c10::detail::intrusive_target_default_null_type<EmbeddingPackedParamsBase> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::hardswish, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > 
const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > 
const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::linear, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > 
const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > 
const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_relu_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > 
const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_dynamic_fp16, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > 
const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_relu_dynamic_fp16, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > 
const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::linear_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > 
const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > (at::Tensor, c10::optional<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_prepack_legacy, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_prepack_fp16, overload_name =
dispatch_key = CPU
singature = c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > (at::Tensor, c10::optional<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_prepack_fp16_legacy, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::linear_prepack, overload_name =
dispatch_key = QuantizedCPU
singature = c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > (at::Tensor, c10::optional<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::linear_prepack_fp16, overload_name =
dispatch_key = CPU
singature = c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > (at::Tensor, c10::optional<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _quantized::linear_prepack_fp16_legacy, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::matmul, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul, overload_name = Scalar2
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_relu, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_relu, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_relu, overload_name = Scalar2
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_relu, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_relu_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_scalar, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_scalar_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_scalar_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_scalar_relu_out, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_scalar, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_scalar_relu, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_scalar_out, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::mul_scalar_relu_out, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, at::Tensor, at::Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::layer_norm, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, std::vector<long, std::allocator<long> >, c10::optional<at::Tensor>, c10::optional<at::Tensor>, double, double, long)[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::group_norm, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, long, c10::optional<at::Tensor>, c10::optional<at::Tensor>, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::instance_norm, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::optional<at::Tensor>, c10::optional<at::Tensor>, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::max_pool1d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::max_pool2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::relu6, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::leaky_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, c10::Scalar const&, bool, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::sigmoid, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::softmax, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, long, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::threshold, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add.out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add.Scalar(Tensor qa, Scalar b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add.Scalar2(Scalar b, Tensor qa) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add.Scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_relu(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_relu.Scalar(Tensor qa, Scalar b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_relu.Scalar2(Scalar b, Tensor qa) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_relu.out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_relu.Scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_relu_out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_scalar(Tensor qa, Scalar b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_scalar_relu(Tensor qa, Scalar b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_scalar_relu_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_scalar_out.Tensor(Tensor qa, Tensor b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_scalar.Tensor(Tensor qa, Tensor b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_scalar_relu.Tensor(Tensor qa, Tensor b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::add_scalar_relu_out.Tensor(Tensor qa, Tensor b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::batch_norm(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::batch_norm_relu(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::batch_norm1d(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::batch_norm1d_relu(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::batch_norm2d(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::batch_norm2d_relu(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::batch_norm3d(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::batch_norm3d_relu(Tensor qx, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::clamp(Tensor qx, Scalar? min=None, Scalar? max=None) -> (Tensor qy)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::threshold(Tensor qx, Scalar threshold, Scalar value) -> (Tensor qy)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::cat(Tensor[] qx, int dim, float? scale, int? zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::cat_relu(Tensor[] qx, int dim, float? scale, int? zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::cat_out(Tensor[] qx, int dim, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::cat_relu_out(Tensor[] qx, int dim, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv1d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv1d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d.new(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_relu.new(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d.new(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_relu.new(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase weight, int[] stride, 
int[] padding, int[] dilation, int groups, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase weight, int[] stride, int[] padding, int[] dilation, int groups, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase weight, int[] stride, 
int[] padding, int[] dilation, int groups, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase weight, int[] stride, int[] padding, int[] dilation, int groups, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv1d_dynamic(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, bool reduce_range=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_dynamic(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, bool reduce_range=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_dynamic(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, bool reduce_range=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv1d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv3dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv1d_unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_unpack_sizes(Any packed_weights) -> (Any)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_unpack(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_stride(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_padding(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_output_padding(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_dilation(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_groups(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int)  
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv2d_transpose(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_stride(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_padding(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_output_padding(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_dilation(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_groups(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int)  
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv3d_transpose(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose1d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose1d_dynamic(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, bool reduce_range=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_dynamic(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, bool reduce_range=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_dynamic(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, bool reduce_range=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose1d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] output_padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose1d_unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) 
-> (Tensor unpacked_weights, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] output_padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_unpack(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) 
-> (Tensor unpacked_weights, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_stride(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) 
-> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_padding(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_output_padding(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_dilation(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_groups(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) 
-> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose2d_transpose(__torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weights) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] output_padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv3dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_unpack(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) 
-> (Tensor unpacked_weights, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_stride(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) 
-> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_padding(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_output_padding(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_dilation(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int[])
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_groups(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) 
-> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::conv_transpose3d_transpose(__torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weights) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::elu(Tensor self, float output_scale, int output_zero_point, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::dropout(Tensor self, float output_scale, int output_zero_point, Scalar p=0.5, bool training=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_prepack(Tensor weight) -> (__torch__.torch.classes.quantized.EmbeddingPackedParamsBase W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_unpack(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase W_prepack) -> (Tensor W_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_byte_prepack(Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_byte_unpack(Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_4bit_prepack(Tensor weight, bool optimized_qparams=False, int nbins=200, float ratio=0.16) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_4bit_unpack(Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_2bit_prepack(Tensor weight, bool optimized_qparams=False, int nbins=200, float ratio=0.16) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_2bit_unpack(Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_byte_rowwise_offsets(Tensor weight, Tensor indices, Tensor? offsets=None, bool scale_grad_by_freq=False, int mode=0, bool pruned_weights=False, Tensor? per_sample_weights=None, Tensor? compressed_indices_mapping=None, bool include_last_offset=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_4bit_rowwise_offsets(Tensor weight, Tensor indices, Tensor? offsets=None, bool scale_grad_by_freq=False, int mode=0, bool pruned_weights=False, Tensor? per_sample_weights=None, Tensor? compressed_indices_mapping=None, bool include_last_offset=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_2bit_rowwise_offsets(Tensor weight, Tensor indices, Tensor? offsets=None, bool scale_grad_by_freq=False, int mode=0, bool pruned_weights=False, Tensor? per_sample_weights=None, Tensor? compressed_indices_mapping=None, bool include_last_offset=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_byte(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase weight, Tensor indices, Tensor? offsets=None, bool scale_grad_by_freq=False, int mode=0, bool pruned_weights=False, Tensor? per_sample_weights=None, Tensor? compressed_indices_mapping=None, bool include_last_offset=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_bag_4bit(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase weight, Tensor indices, Tensor? offsets=None, bool scale_grad_by_freq=False, int mode=0, bool pruned_weights=False, Tensor? per_sample_weights=None, Tensor? compressed_indices_mapping=None, bool include_last_offset=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_byte(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase weight, Tensor indices, bool pruned_weights=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::embedding_4bit(__torch__.torch.classes.quantized.EmbeddingPackedParamsBase weight, Tensor indices, bool pruned_weights=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::celu(Tensor self, float output_scale, int output_zero_point, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::group_norm(Tensor input, int num_groups, Tensor? weight, Tensor? bias, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::hardswish(Tensor input, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::instance_norm(Tensor input, Tensor? weight, Tensor? bias, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight, Tensor? bias, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_relu(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_dynamic(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, bool reduce_range=False) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_relu_dynamic(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, bool reduce_range=False) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_dynamic_fp16(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_relu_dynamic_fp16(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_prepack(Tensor W, Tensor? B=None) -> (__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_prepack_fp16(Tensor W, Tensor? B=None) -> (__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_prepack_legacy(Tensor W, Tensor? B=None) -> (Tensor W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_prepack_fp16_legacy(Tensor W, Tensor? B=None) -> (Tensor W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_unpack(__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack) -> (Tensor W_origin, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_unpack_fp16(__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack) -> (Tensor W_origin, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_unpack.legacy(Tensor W_prepack) -> (Tensor W_origin, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::linear_unpack_fp16.legacy(Tensor W_prepack) -> (Tensor W_origin, Tensor? B_origin)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::matmul(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul.out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul.Scalar(Tensor qa, Scalar b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul.Scalar2(Scalar b, Tensor qa) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul.Scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_relu(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_relu.out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_relu.Scalar(Tensor qa, Scalar b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_relu.Scalar2(Scalar b, Tensor qa) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_relu.Scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_relu_out(Tensor qa, Tensor qb, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_scalar(Tensor qa, Scalar b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_scalar_relu(Tensor qa, Scalar b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_scalar_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_scalar_relu_out(Tensor qa, Scalar b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_scalar.Tensor(Tensor qa, Tensor b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_scalar_relu.Tensor(Tensor qa, Tensor b) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_scalar_out.Tensor(Tensor qa, Tensor b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::mul_scalar_relu_out.Tensor(Tensor qa, Tensor b, Tensor(a!) out) -> (Tensor(a!) out)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::max_pool1d(Tensor qx, int[] kernel_size, int[] stride, int[] padding, int[] dilation, bool ceil_mode) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::max_pool2d(Tensor qx, int[] kernel_size, int[] stride, int[] padding, int[] dilation, bool ceil_mode) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::relu6(Tensor qx, bool inplace=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::leaky_relu(Tensor qx, Scalar negative_slope, bool inplace, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::sigmoid(Tensor qx, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantized::softmax(Tensor qx, int dim, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::add(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv2d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float 
output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv2d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv2d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv3d(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, float 
output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv3d_relu(Tensor qx, __torch__.torch.classes.quantized.Conv3dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv3d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv3dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv_transpose1d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv_transpose2d(Tensor qx, __torch__.torch.classes.quantized.Conv2dPackedParamsBase packed_weight, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv_transpose1d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] output_padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv_transpose2d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] output_padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv2dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::conv_transpose3d_prepack(Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] output_padding, int[] dilation, int groups) -> (__torch__.torch.classes.quantized.Conv3dPackedParamsBase)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::linear(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::linear_dynamic(Tensor X, __torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack, bool reduce_range=False) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::linear_prepack(Tensor W, Tensor? B=None) -> (__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::linear_prepack_fp16(Tensor W, Tensor? B=None) -> (__torch__.torch.classes.quantized.LinearPackedParamsBase W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::linear_prepack_legacy(Tensor W, Tensor? B=None) -> (Tensor W_prepack)
[FTXJ LOG] Dispatcher::registerDef, schema = _quantized::linear_prepack_fp16_legacy(Tensor W, Tensor? B=None) -> (Tensor W_prepack)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_unpack, overload_name =
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv1d_unpack, overload_name =
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_unpack, overload_name =
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_unpack_sizes, overload_name =
singature = c10::IValue (c10::IValue const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_unpack, overload_name = 
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_stride, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_padding, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_output_padding, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_dilation, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_groups, overload_name =
singature = long (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv2d_transpose, overload_name =
singature = long (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_stride, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_padding, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_output_padding, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_dilation, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_groups, overload_name =
singature = long (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv3d_transpose, overload_name =
singature = long (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose1d_unpack, overload_name =
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_unpack, overload_name =
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_unpack, overload_name =
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_stride, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_padding, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_output_padding, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_dilation, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_groups, overload_name =
singature = long (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose2d_transpose, overload_name =
singature = long (c10::intrusive_ptr<ConvPackedParamsBase<2>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<2> > > const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_stride, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_padding, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_output_padding, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_dilation, overload_name =
singature = c10::List<long> (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_groups, overload_name =
singature = long (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::conv_transpose3d_transpose, overload_name =
singature = long (c10::intrusive_ptr<ConvPackedParamsBase<3>, c10::detail::intrusive_target_default_null_type<ConvPackedParamsBase<3> > > const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_unpack, overload_name = legacy
dispatch_key = CPU
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_unpack_fp16, overload_name = legacy
dispatch_key = CPU
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_unpack, overload_name =
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantized::linear_unpack_fp16, overload_name =
singature = std::tuple<at::Tensor, c10::optional<at::Tensor> > (c10::intrusive_ptr<LinearPackedParamsBase, c10::detail::intrusive_target_default_null_type<LinearPackedParamsBase> > const&)
[FTXJ LOG] Dispatcher::registerDef, schema = prepacked::unpack_prepacked_sizes_conv2d(Any W_prepack) -> (Any)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prepacked::unpack_prepacked_sizes_conv2d, overload_name =
singature = c10::IValue (c10::IValue const&)
[FTXJ LOG] Dispatcher::registerDef, schema = prepacked::unpack_prepacked_sizes_linear(Any W_prepack) -> (Any)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prepacked::unpack_prepacked_sizes_linear, overload_name = 
singature = c10::IValue (c10::IValue const&)
[FTXJ LOG] Dispatcher::registerDef, schema = prepacked::linear_clamp_prepack(Tensor W, Tensor? B=None, Scalar? output_min=None, Scalar? output_max=None) 
-> (__torch__.torch.classes.xnnpack.LinearOpContext)
[FTXJ LOG] Dispatcher::registerDef, schema = prepacked::linear_clamp_run(Tensor X, __torch__.torch.classes.xnnpack.LinearOpContext W_prepack) -> (Tensor 
Y)
[FTXJ LOG] Dispatcher::registerDef, schema = prepacked::conv2d_clamp_prepack(Tensor W, Tensor? B, int[2] stride, int[2] padding, int[2] dilation, int groups, Scalar? output_min=None, Scalar? output_max=None) -> (__torch__.torch.classes.xnnpack.Conv2dOpContext)
[FTXJ LOG] Dispatcher::registerDef, schema = prepacked::conv2d_transpose_clamp_prepack(Tensor W, Tensor? B, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, int groups, Scalar? output_min=None, Scalar? output_max=None) -> (__torch__.torch.classes.xnnpack.TransposeConv2dOpContext)    
[FTXJ LOG] Dispatcher::registerDef, schema = prepacked::conv2d_clamp_run(Tensor X, __torch__.torch.classes.xnnpack.Conv2dOpContext W_prepack) -> (Tensor 
Y)
[FTXJ LOG] Dispatcher::registerDef, schema = prepacked::conv2d_transpose_clamp_run(Tensor X, __torch__.torch.classes.xnnpack.TransposeConv2dOpContext W_prepack) -> (Tensor Y)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prepacked::linear_clamp_prepack, overload_name =
dispatch_key = CPU
singature = c10::intrusive_ptr<at::native::xnnpack::LinearOpContext, c10::detail::intrusive_target_default_null_type<at::native::xnnpack::LinearOpContext> > (at::Tensor, c10::optional<at::Tensor>, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prepacked::linear_clamp_run, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::intrusive_ptr<at::native::xnnpack::LinearOpContext, c10::detail::intrusive_target_default_null_type<at::native::xnnpack::LinearOpContext> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prepacked::conv2d_clamp_prepack, overload_name =
dispatch_key = CPU
singature = c10::intrusive_ptr<at::native::xnnpack::Conv2dOpContext, c10::detail::intrusive_target_default_null_type<at::native::xnnpack::Conv2dOpContext> > (at::Tensor, c10::optional<at::Tensor>, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, long, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prepacked::conv2d_transpose_clamp_prepack, overload_name =
dispatch_key = CPU
singature = c10::intrusive_ptr<at::native::xnnpack::TransposeConv2dOpContext, c10::detail::intrusive_target_default_null_type<at::native::xnnpack::TransposeConv2dOpContext> > (at::Tensor, c10::optional<at::Tensor>, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, std::vector<long, std::allocator<long> >, long, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = prepacked::conv2d_clamp_run, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::intrusive_ptr<at::native::xnnpack::Conv2dOpContext, c10::detail::intrusive_target_default_null_type<at::native::xnnpack::Conv2dOpContext> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prepacked::conv2d_transpose_clamp_run, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::intrusive_ptr<at::native::xnnpack::TransposeConv2dOpContext, c10::detail::intrusive_target_default_null_type<at::native::xnnpack::TransposeConv2dOpContext> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_init_dropout_state, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (double, bool, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start
dispatch_key = BackendSelect
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_step
dispatch_key = BackendSelect
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bartlett_window, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bartlett_window, overload_name = periodic
dispatch_key = BackendSelect
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::blackman_window, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::blackman_window, overload_name = periodic
dispatch_key = BackendSelect
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = names
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_affine_quantized, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, double, long, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_per_channel_affine_quantized, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_quantized, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m
dispatch_key = BackendSelect
singature = at::Tensor (long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name = names
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, 
c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::from_file, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::basic_string_view<char>, c10::optional<bool>, c10::optional<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hann_window, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hann_window, overload_name = periodic
dispatch_key = BackendSelect
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic
dispatch_key = BackendSelect
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic_alpha
dispatch_key = BackendSelect
singature = at::Tensor (long, bool, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic_alpha_beta
dispatch_key = BackendSelect
singature = at::Tensor (long, bool, double, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name = periodic
dispatch_key = BackendSelect
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name = beta
dispatch_key = BackendSelect
singature = at::Tensor (long, bool, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name = names
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scalar_tensor, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = names
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_with_names
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low
dispatch_key = BackendSelect
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator
dispatch_key = BackendSelect
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = names
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_with_names
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator
dispatch_key = BackendSelect
singature = at::Tensor (long, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = step
dispatch_key = BackendSelect
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name = names
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_efficientzerotensor, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_compressed_tensor, overload_name = comp_plain_value_size
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csr_tensor, overload_name = crow_col_value_size
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csc_tensor, overload_name = ccol_row_value_size
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsr_tensor, overload_name = crow_col_value_size
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsc_tensor, overload_name = ccol_row_value_size
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_compressed_tensor, overload_name = comp_plain_value
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csr_tensor, overload_name = crow_col_value
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csc_tensor, overload_name = ccol_row_value
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsr_tensor, overload_name = crow_col_value
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsc_tensor, overload_name = ccol_row_value
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_compressed_tensor_unsafe, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_tensor_unsafe, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csc_tensor_unsafe, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_bsr_tensor_unsafe, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_bsc_tensor_unsafe, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = size
dispatch_key = BackendSelect
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = indices
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = indices_size
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_unsafe, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_with_dims, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_with_dims_and_tensors, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, long, c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_copy, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype_layout
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_indices, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_indices, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float
dispatch_key = BackendSelect
singature = at::Tensor (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftfreq, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftfreq, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_pinned, overload_name =
dispatch_key = BackendSelect
singature = bool (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pin_memory, overload_name =
dispatch_key = BackendSelect
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_assert_async, overload_name =
dispatch_key = CPU
singature = void (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_dropout, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_dropout_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dim
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dim
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_out
dispatch_key = CPU
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bincount, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = 
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::complex, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::count_nonzero, overload_name = dim_IntList
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cummax_helper, overload_name =
dispatch_key = CPU
singature = void (at::Tensor const&, at::Tensor&, at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cummin_helper, overload_name =
dispatch_key = CPU
singature = void (at::Tensor const&, at::Tensor&, at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_ctc_loss, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_ctc_loss_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor 
const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor_mode
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out_mode
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_dense_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_forward_only, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_dense_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_per_sample_weights_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = CPU
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_affine_quantized, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, double, long, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_per_channel_affine_quantized, overload_name = 
dispatch_key = CPU
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = CPU
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m_out
dispatch_key = CPU
singature = at::Tensor& (long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::from_file, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::basic_string_view<char>, c10::optional<bool>, c10::optional<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_2d_backward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool, std::array<bool, 2ul>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_3d_backward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool, std::array<bool, 2ul>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_group_norm, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, 
long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_group_norm_backward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, long, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_r2c, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_r2c, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2r, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2r, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2c, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2c, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor
dispatch_key = CPU
singature = at::Tensor (c10::Scalar const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor_out
dispatch_key = CPU
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isnan, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = values
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm_backward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutTensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_logcumsumexp, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_logcumsumexp, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_aminmax, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_aminmax, overload_name = dim
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<long>, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_compute_linear_combination, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_compute_linear_combination, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim_max
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = dim
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim_values
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim_values
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim_min
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm_backward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, std::array<bool, 3ul>)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_update_stats, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cdist_forward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cdist_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pdist_forward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pdist_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pixel_shuffle, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pixel_unshuffle, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::channel_shuffle, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_channel_shuffle, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator_out
dispatch_key = CPU
singature = at::Tensor& (long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name = decimals
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu_backward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = IntList_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nansum, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nansum, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = int_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flip, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::roll, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_transform_bias_rescale_qkv, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_tensor_from_mask, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_from_padded, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unique, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_dim, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_consecutive, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_dim_consecutive, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unique2, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_interface, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_interface_backward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_efficientzerotensor, overload_name =
dispatch_key = CPU
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_standard_gamma_grad, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_standard_gamma, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dirichlet_grad, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sample_dirichlet, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::poisson, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binomial, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = dtype_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frexp, overload_name = Tensor_out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse, overload_name = sparse_dim
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csr, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csc, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsr, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsc, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_mkldnn, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor_dynamic, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ScalarType, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, double, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name = tensor_qparams
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name = tensors
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, c10::ScalarType)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_channel, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dequantize, overload_name = self
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_per_tensor_quantized_tensor, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_per_channel_quantized_tensor, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine_cachemask, overload_name = 
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_per_tensor_affine_cachemask_tensor_qparams, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_tensor_affine, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine_cachemask, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_channel_affine, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_local_scalar_dense, overload_name =
dispatch_key = CPU
singature = c10::Scalar (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Storage)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_set_to, overload_name =
dispatch_key = CPU
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_masked_softmax, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_masked_softmax_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = src
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = reduce
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value_reduce
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce_, overload_name = two
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_indices, overload_name =
dispatch_key = CPU
singature = at::Tensor (long, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_indices, overload_name =
dispatch_key = CPU
singature = at::Tensor (long, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name = X
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name = X
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_symeig_helper, overload_name = 
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cholesky_solve_helper, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name = a
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name =
dispatch_key = CPU
singature = at::Tensor (long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histc, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histc, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bins_tensor
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bins_tensor_out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, at::Tensor&, at::Tensor&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bin_ct
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bin_ct_out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_bin_edges, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_from_bin_cts, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_from_bin_tensors, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_Tensor
dispatch_key = CPU
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = stable
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values_stable
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name = values
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = all_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = all_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::equal, overload_name =
dispatch_key = CPU
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar_out
dispatch_key = CPU
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor
dispatch_key = CPU
singature = at::Tensor (double, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor_out
dispatch_key = CPU
singature = at::Tensor& (double, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = Scalar
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = Scalar
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = Scalar
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = Scalar
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = List
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = List
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = List
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = List
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = ScalarList
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = ScalarList
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = ScalarList
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = ScalarList
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name =
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc_, overload_name =
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv_, overload_name = Scalar
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul_, overload_name = Scalar
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv_, overload_name = ScalarList
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul_, overload_name = ScalarList
dispatch_key = CPU
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_maximum, overload_name = List
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_minimum, overload_name = List
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_norm, overload_name = Scalar
dispatch_key = CPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (c10::Scalar const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Tensor
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Tensor_out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Scalar
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name = output
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name = output
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name = output
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name = 
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss_backward, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_jvp, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward_jvp, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name = output
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name = output
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name = 
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name = output
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name = 
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = vec
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = vec
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = vec
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = vec
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose3d, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_forward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_forward, overload_name = output
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_backward, overload_name = grad_input
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_backward, overload_name = output_mask
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d_forward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d_forward, overload_name = output
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_dilated2d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_dilated3d, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col_backward, overload_name = grad_input
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name = L
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_det_lu_based_helper, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_det_lu_based_helper_backward_helper, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_exp, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_slogdet, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_slogdet, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name = out
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name = eigvals
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper_, overload_name =
dispatch_key = CPU
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name = U
dispatch_key = CPU
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name = out
dispatch_key = CPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_qr_helper, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_intlist, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_filled_intlist, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_floatlist, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::segment_reduce, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, bool, 
c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_segment_reduce_backward, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, c10::optional<at::Tensor> const&, long)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_transformer_encoder_layer_fwd, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&, long, long, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool, double, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_native_multi_head_attention, overload_name =
dispatch_key = CPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_new_zeros_with_same_feature_meta, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_same_storage_numel, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_physical, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::affine_grid_generator, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = Tensor_functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_with_logits, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::complex, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::constant_pad_nd, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_overrideable, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_backward_overrideable, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_tbc, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::count_nonzero, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag_embed, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor_mode
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_mode
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar_mode
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_empty, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_empty_strided, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Device)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = 
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name = SymInt
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_grid_sampler_2d_cpu_fallback, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Scalar_Self
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Self
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Scalar_Other
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Other
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Scalar_Other
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logdet, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_convolution, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = values
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = 
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = SymInt
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, c10::SymInt)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnpack_spatial_convolution, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_euclidean_dist, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pixel_shuffle, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pixel_unshuffle, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_pinned, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = bool (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name = decimals
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_scatter, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_scatter, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_scatter, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slogdet, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_split, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_split_with_sizes, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = 
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rot90, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_trilinear, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unsafe_view, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dtype
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frexp, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_addmm, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, 
at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pack_padded_sequence, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Storage)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_storage_offset_functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Tensor_functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lift, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name = dtype
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = src
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = reduce
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value_reduce
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce_, overload_name = two
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_Scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor_Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Scalar_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_Scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor_Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Scalar_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = from_functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = to_functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_check_errors, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = void (at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name = e
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name = e
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dist, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = stable
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<std::vector<at::Tensor, std::allocator<at::Tensor> >, at::Tensor> (c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList_functional
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name = 
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss_backward, overload_name = grad_input
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = vec
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isinf, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = self_scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = self_scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = other_scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = other_scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = self_scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = self_scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = other_scalar
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = other_scalar_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper, overload_name = functional
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name = inverse
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_tensor_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_warn_in_autograd, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = SymInt
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = SymInt_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::SymIntArrayRef, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_copy, overload_name = int
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_copy, overload_name = int_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_copy, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_copy, overload_name = Tensor_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_copy, overload_name = Tensor
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_copy, overload_name = Tensor_out
dispatch_key = CompositeExplicitAutograd
singature = void (at::Tensor const&, long, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = void (at::Tensor const&, c10::ArrayRef<long>, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = dim
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = dim_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_copy, overload_name = int
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_copy, overload_name = int_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ccol_indices_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_indices_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind_copy, overload_name = int
dispatch_key = CompositeExplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind_copy, overload_name = int_out
dispatch_key = CompositeExplicitAutograd
singature = void (at::Tensor const&, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = dtype
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = dtype_out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias_copy, overload_name =
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias_copy, overload_name = out
dispatch_key = CompositeExplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Byte, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Char, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Double, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Float, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Int, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Long, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Short, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Half, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<at::Tensor> const&, c10::optional<bool>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_data, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::data, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_leaf, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::output_nr, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_version, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::requires_grad_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::retain_grad, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::retains_grad, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unpack_dual, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rename_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rename, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_to, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_to, overload_name = ellipsis_idx
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_as, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_tensors, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::refine_names, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_use_cudnn_rnn_flatten_weight, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_debug_has_internal_overlap, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_draw, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, at::Tensor const&, long, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_ff_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_scramble_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_initialize_state_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_from_tensor, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_shape_as_tensor, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dropout, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dropout_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_dropout, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_dropout_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alpha_dropout, overload_name = 
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alpha_dropout_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_alpha_dropout, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_alpha_dropout_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chalf, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::real, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::imag, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_conj, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_neg, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool1d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool1d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool1d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::affine_grid_generator_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::allclose, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_step
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dim_arange, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_1d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_1d, overload_name = Sequence
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_2d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_2d, overload_name = Sequence
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_3d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_3d, overload_name = Sequence
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bartlett_window, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bartlett_window, overload_name = periodic
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_batch_norm_impl_index, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, long> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_batch_norm_impl_index_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (long, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, std::array<bool, 3ul>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = p
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bilinear, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_with_logits_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::blackman_window, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::blackman_window, overload_name = periodic
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::broadcast_tensors, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::broadcast_to, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::block_diag, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chain_matmul, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chain_matmul, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_chunk, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chunk, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = sections
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = indices
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = tensor_indices_or_sections
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = Tensor_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_is_acceptable, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::contiguous, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::MemoryFormat)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name = deprecated
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution_mode, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution_double_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv1d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv2d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv3d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv1d, overload_name = padding
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv2d, overload_name = padding
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv3d, overload_name = padding
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_tbc_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose1d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose2d, overload_name = input
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose3d, overload_name = input
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosine_embedding_loss, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cov, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::corrcoef, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummaxmin_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumulative_trapezoid, overload_name = x
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumulative_trapezoid, overload_name = dx
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ctc_loss, overload_name = IntList
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ctc_loss, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagflat, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_diagonal, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname, at::Dimname, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_diagonal_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diff, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diff, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarint
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<long>, long)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalararray
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = array
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarrayint
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<c10::Scalar>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarrayarray
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = tensorarrayint
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = tensorarray
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Tensor_mode
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = out_mode
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Tensor_mode
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Scalar_mode
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Scalar_mode
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::einsum, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::basic_string_view<char>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_sparse_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_rowwise_prune, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_stack, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_stack, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_bag, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_bag, overload_name = padding_idx
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, bool, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_sparse_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_full, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_zeros, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_ones, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_as, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = using_ints
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = named_out_dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = using_names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = DimnameList
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::ArrayRef<long>, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, 
c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<long>, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full_like, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_grid_sampler_2d_cpu_fallback_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hann_window, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hann_window, overload_name = periodic
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic_alpha
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, bool, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic_alpha_beta
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, bool, double, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name = periodic
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name = beta
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, bool, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hinge_embedding_loss, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::group_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_group_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, 
long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_get_plan_cache_size, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = long (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_get_plan_cache_max_size, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = long (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_set_plan_cache_max_size, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_clear_plan_cache, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::instance_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isclose, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_distributed, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_floating_point, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_complex, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_conj, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_is_zerotensor, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_neg, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isreal, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_nonzero, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_same_size, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_signed, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_inference, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kron, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kron, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::layer_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, bool)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linear, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linear, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_int8_weight_fp32_activation, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_int8_weight, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_quantize_weight, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, double, long> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_gemm_matrix_fp16, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_fp16_weight_fp32_activation, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_fp16_weight, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_quantized_matrix, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_quantized_matrix, overload_name = KN
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::margin_ranking_loss, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_rank, overload_name = tol
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_rank, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_power, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_power, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_exp, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_exp_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = names_dim_max
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::value_selecting_reduction_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool1d_with_indices, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool1d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmean, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmean, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = names_dim_values
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = names_dim_values
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = names_dim_min
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_mm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_vulkan_available, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnpack_available, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones_like, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pairwise_distance, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cdist, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pdist, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosine_similarity, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = intlist
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::moveaxis, overload_name = intlist
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::moveaxis, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::numpy_T, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_H, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mT, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mH, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adjoint, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_channel_shuffle, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pin_memory, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pinverse, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::poisson_nll_loss, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scalar_tensor, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_with_names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand_like, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (long, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (long, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (long, long, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint_like, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint_like, overload_name = low_dtype
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_with_names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn_like, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = step
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ravel, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_int
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape_as, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu6, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu6_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::infinitely_differentiable_gelu_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::selu, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::selu_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = long (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = long (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = sizes
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = array
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = array
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = array
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hstack, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hstack, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vstack, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vstack, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dstack, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dstack, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stft, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, c10::optional<bool>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stft, overload_name = center
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, c10::basic_string_view<char>, bool, c10::optional<bool>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::istft, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, bool, c10::optional<bool>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = long (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = long (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_DimnameList
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = DimnameList_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum_to_size, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = dim
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction_names
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = Dimname_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tile, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::one_hot, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fliplr, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flipud, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapezoid, overload_name = x
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapezoid, overload_name = dx
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapz, overload_name = x
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapz, overload_name = dx
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triplet_margin_loss, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, double, double, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::type_as, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_compatible_shallow_copy_type, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vander, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = dim
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = names_dim
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction_names
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = ScalarSelf
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = ScalarOther
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm_except_dim, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_differentiable_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name = names
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros_like, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dtype
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dim_dtype
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name = int
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_ScalarOpt_dim_dtype
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_dtype_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_ScalarOpt_dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name = dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = dim
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = dim_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::positive, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_compressed_tensor, overload_name = comp_plain_value_size
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csr_tensor, overload_name = crow_col_value_size
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csc_tensor, overload_name = ccol_row_value_size
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsr_tensor, overload_name = crow_col_value_size
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsc_tensor, overload_name = ccol_row_value_size
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_compressed_tensor, overload_name = comp_plain_value
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csr_tensor, overload_name = crow_col_value
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csc_tensor, overload_name = ccol_row_value
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsr_tensor, overload_name = crow_col_value
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsc_tensor, overload_name = ccol_row_value
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_compressed_tensor_unsafe, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_tensor_unsafe, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csc_tensor_unsafe, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_bsr_tensor_unsafe, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_bsc_tensor_unsafe, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = size
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = indices
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = indices_size
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_unsafe, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_coo_tensor_args, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_compressed_tensor_args, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::Layout)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_csr_tensor_args, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_csc_tensor_args, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_bsr_tensor_args, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_bsc_tensor_args, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_cpu, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_dense, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_dense_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::coalesce, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = Dimname
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_mkldnn_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine, overload_name = tensor_qparams
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine_cachemask_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_tensor_affine_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine_cachemask_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_channel_affine_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fused_moving_avg_obs_fake_quant, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, 
long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_choose_qparams_per_tensor, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<double, long> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_saturate_weight_to_fp16, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::choose_qparams_optimized, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_autocast_to_reduced_precision, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool, bool, c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_autocast_to_full_precision, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype_layout
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = device
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Device, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = other
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::meshgrid, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::meshgrid, overload_name = indexing
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cartesian_prod, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::combinations, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::item, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = c10::Scalar (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = c10::ScalarType (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = c10::ScalarType (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Tensor
dispatch_key = CompositeImplicitAutograd
singature = c10::ScalarType (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Scalar
dispatch_key = CompositeImplicitAutograd
singature = c10::ScalarType (c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::can_cast, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = bool (c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::promote_types, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = c10::ScalarType (c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_lstm_cell_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_differentiable_lstm_cell_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_differentiable_gru_cell_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm, overload_name = input
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, 
bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm, overload_name = data
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru, overload_name = input
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru, overload_name = data
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh, overload_name = input
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh, overload_name = data
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu, overload_name = input
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu, overload_name = data
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm_cell, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru_cell, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh_cell, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu_cell, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_lstm_cell, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, 
c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_gru_cell, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_rnn_relu_cell, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_rnn_tanh_cell, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pack_padded_sequence_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_packed_sequence, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor_storage_offset
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = Dimname_Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = Dimname_Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = Dimname_Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = Dimname_Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = dimname_src
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = dimname_value
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__and__, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__iand__, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__and__, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__iand__, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__or__, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ior__, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__or__, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ior__, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__xor__, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ixor__, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__xor__, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ixor__, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Tensor_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Tensor_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Tensor_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Tensor_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Tensor_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take_along_dim, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take_along_dim, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero_numpy, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argwhere, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = dimname_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_gather_sparse_backward, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross_entropy_loss, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vander, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name = U
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name = Q
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::orgqr, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::orgqr, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_lu_with_info, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2_, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name = int_bins
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name = TensorList_bins
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = other
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = other
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_values
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_stable
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_values_stable
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::msort, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::msort, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argsort, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argsort, overload_name = dimname
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Tensor_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power_, overload_name = Tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power_, overload_name = Scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_nd, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_circular, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_enum, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pad, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::thnn_conv2d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::thnn_conv2d, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::column_stack, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::column_stack, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isfinite, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_batch_dim, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_remove_batch_dim, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expm1, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expm1, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_exp2, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_exp2, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_psi, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_psi, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_digamma, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_digamma, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaln, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaln, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erf, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erf, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfc, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfc, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfinv, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfinv, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtr, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtr, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = self_scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = self_scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = other_scalar
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = other_scalar_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logit, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logit, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_polygamma, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_polygamma, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logsumexp, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logsumexp, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expit, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expit, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_sinc, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_sinc, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_round, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_round, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log1p, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log1p, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_softmax, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammainc, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammainc, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaincc, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaincc, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_multigammaln, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_multigammaln, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_softmax, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft2, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft2, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft2, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft2, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft2, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft2, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft2, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft2, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft2, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft2, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft2, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft2, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftn, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftn, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftn, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftn, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftn, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftn, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfftn, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfftn, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfftn, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfftn, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfftn, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfftn, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftfreq, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftfreq, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftfreq, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftfreq, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftshift, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftshift, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_det, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_det, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::det, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matmul, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matmul, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvals, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvals, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inner, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inner, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::outer, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::outer, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ger, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ger, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = ord_str
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = ord_str_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = str_ord
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = str_ord_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name = U
dispatch_key = CompositeImplicitAutograd
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svdvals, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svdvals, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = p_str
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = p_str_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_float
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_float_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, double, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = rcond_tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = out_rcond_tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorinv, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorinv, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorsolve, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorsolve, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_power, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_power, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_tensor_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_float
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_float_out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, double, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = tol_tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = out_tol_tensor
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_multi_dot, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_multi_dot, overload_name = out
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_serialization_subcmul, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_string_default, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_ambiguous_defaults, overload_name = a
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_ambiguous_defaults, overload_name = b
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (at::Tensor const&, long, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pad_sequence, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, bool, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten_dense_tensors, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten_dense_tensors, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nested_tensor, overload_name =
dispatch_key = CompositeImplicitAutograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dimname_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Tensor_mode
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = out_mode
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Tensor_mode
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_stack, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_stack, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::Device, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::Device)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = dimname
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = dimname_out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = names_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmean, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmean, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name = decimals
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce_, overload_name = two
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = from_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = to_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take_along_dim, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take_along_dim, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = dimname_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name = U
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bins_tensor_out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, at::Tensor&, at::Tensor&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bin_ct_out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values_stable
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_stable
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_values_stable
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = all_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (double, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float
dispatch_key = Functionalize
singature = at::Tensor (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float_out
dispatch_key = Functionalize
singature = at::Tensor& (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&, at::Tensor const&, double, double, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name = output
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name = output
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conv_depthwise2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::column_stack, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::column_stack, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expm1, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expm1, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erf, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erf, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logsumexp, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logsumexp, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log1p, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log1p, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaincc, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaincc, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_multigammaln, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_multigammaln, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft2, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft2, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft2, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftn, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftn, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfftn, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfftn, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvals, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvals, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name = eigvals
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ger, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ger, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = ord_str
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = ord_str_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_multi_dot, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_multi_dot, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_copy, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_copy, overload_name = int_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rename, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rename_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::imag, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_conj, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chunk, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = sections
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = indices
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = tensor_indices_or_sections
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_as, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::ArrayRef<long>, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = intlist
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mH, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pin_memory, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = sizes
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = int
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = array
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::positive, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_indices, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Double, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Int, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Short, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::output_nr, overload_name =
dispatch_key = Functionalize
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_use_cudnn_rnn_flatten_weight, overload_name =
dispatch_key = Functionalize
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_initialize_state_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_shape_as_tensor, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dim_arange, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bartlett_window, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bartlett_window, overload_name = periodic
dispatch_key = Functionalize
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::blackman_window, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::blackman_window, overload_name = periodic
dispatch_key = Functionalize
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_is_acceptable, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name = deprecated
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv2d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv2d, overload_name = padding
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_tbc_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cov, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Scalar_mode
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Scalar_mode
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_bag, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_bag, overload_name = padding_idx
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, bool, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full_like, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hann_window, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hann_window, overload_name = periodic
dispatch_key = Functionalize
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name = periodic
dispatch_key = Functionalize
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name = beta
dispatch_key = Functionalize
singature = at::Tensor (long, bool, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_get_plan_cache_size, overload_name =
dispatch_key = Functionalize
singature = long (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_get_plan_cache_max_size, overload_name =
dispatch_key = Functionalize
singature = long (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_is_zerotensor, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_inference, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::margin_ranking_loss, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_exp, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_mm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnpack_available, overload_name =
dispatch_key = Functionalize
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint_like, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint_like, overload_name = low_dtype
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu6, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu6_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::selu, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::selu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::istft, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, bool, c10::optional<bool>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = dim
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = names_dim
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction_names
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flipud, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = dim
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = names_dim
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction_names
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm_except_dim, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros_like, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_compressed_tensor_unsafe, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = size
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = indices
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = indices_size
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_bsc_tensor_args, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_mkldnn_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine, overload_name = tensor_qparams
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fused_moving_avg_obs_fake_quant, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, 
long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_choose_qparams_per_tensor, overload_name =
dispatch_key = Functionalize
singature = std::tuple<double, long> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::meshgrid, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::meshgrid, overload_name = indexing
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cartesian_prod, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::can_cast, overload_name =
dispatch_key = Functionalize
singature = bool (c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::promote_types, overload_name =
dispatch_key = Functionalize
singature = c10::ScalarType (c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh, overload_name = input
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh, overload_name = data
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru_cell, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu_cell, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_packed_sequence, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_gather_sparse_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vander, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argsort, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argsort, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_circular, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_softmax, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftshift, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_ambiguous_defaults, overload_name = a
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_ambiguous_defaults, overload_name = b
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pad_sequence, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>, bool, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten_dense_tensors, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nested_tensor, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dimname_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = names_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = names_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = dimname
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = dimname_out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diff, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diff, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, double, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m
dispatch_key = Functionalize
singature = at::Tensor (long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m_out
dispatch_key = Functionalize
singature = at::Tensor& (long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_r2c, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_logcumsumexp, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = dimname_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim_values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = names_dim
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = names_dim_values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_elemt, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (long, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator
dispatch_key = Functionalize
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator_out
dispatch_key = Functionalize
singature = at::Tensor& (long, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low
dispatch_key = Functionalize
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_out
dispatch_key = Functionalize
singature = at::Tensor& (long, long, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator
dispatch_key = Functionalize
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator_out
dispatch_key = Functionalize
singature = at::Tensor& (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator
dispatch_key = Functionalize
singature = at::Tensor (long, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator_out
dispatch_key = Functionalize
singature = at::Tensor& (long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = step
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hstack, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hstack, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dstack, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dstack, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = IntList_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_DimnameList
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = DimnameList_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = names_dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = names_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_names
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_names_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = names_dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = names_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_names
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_names_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Storage, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Storage)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_storage_offset_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor_Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name = X
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name = X
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name = Q
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name = a
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::orgqr, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::orgqr, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name = values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = all_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = Scalar
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = Scalar
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = List
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = List
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = ScalarList
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = ScalarList
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name = output
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_forward, overload_name = output
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfc, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfc, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logit, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logit, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_polygamma, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_polygamma, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_sinc, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_sinc, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft2, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfftn, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfftn, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name = L
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matmul, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matmul, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name = inverse
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::outer, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::outer, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name = U
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = p_str
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = p_str_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorsolve, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorsolve, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_float
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_float_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = tol_tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = out_tol_tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::refine_names, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::real, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name = Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname, at::Dimname, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::numpy_T, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = int
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = array
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dim
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = Dimname
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Char, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Half, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_backward, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<at::Tensor> const&, c10::optional<bool>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_data, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::data, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::requires_grad_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_as, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_ff_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_alpha_dropout, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_alpha_dropout_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::allclose, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_1d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_1d, overload_name = Sequence
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_batch_norm_impl_index, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, long> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bilinear, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_chunk, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose1d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose2d, overload_name = input
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose3d, overload_name = input
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosine_embedding_loss, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumulative_trapezoid, overload_name = x
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumulative_trapezoid, overload_name = dx
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ctc_loss, overload_name = IntList
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ctc_loss, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarint
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<long>, long)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalararray
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = array
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarrayint
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<c10::Scalar>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarrayarray
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = tensorarrayint
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = tensorarray
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::einsum, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::basic_string_view<char>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_grid_sampler_2d_cpu_fallback_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hinge_embedding_loss, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_set_plan_cache_max_size, overload_name =
dispatch_key = Functionalize
singature = void (long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_clear_plan_cache, overload_name =
dispatch_key = Functionalize
singature = void (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isclose, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_floating_point, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_conj, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isreal, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_nonzero, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::layer_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, bool)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_gemm_matrix_fp16, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_quantized_matrix, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_quantized_matrix, overload_name = KN
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::value_selecting_reduction_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool1d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones_like, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pairwise_distance, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pdist, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = int
dispatch_key = Functionalize
singature = long (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = Dimname
dispatch_key = Functionalize
singature = long (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = int
dispatch_key = Functionalize
singature = long (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = Dimname
dispatch_key = Functionalize
singature = long (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum_to_size, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::one_hot, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fliplr, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triplet_margin_loss, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, double, double, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::type_as, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name = Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csc_tensor, overload_name = ccol_row_value_size
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csc_tensor, overload_name = ccol_row_value
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_bsr_tensor_unsafe, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_compressed_tensor_args, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::Layout)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_csr_tensor_args, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_csc_tensor_args, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_cpu, overload_name = 
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine_cachemask_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine_cachemask_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh_cell, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor_storage_offset
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__xor__, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__xor__, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ixor__, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ixor__, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argwhere, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross_entropy_loss, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_enum, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pad, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_batch_dim, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_remove_batch_dim, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftshift, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_serialization_subcmul, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten_dense_tensors, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_step
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chain_matmul, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chain_matmul, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out_mode
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_mode_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar_mode
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, 
c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<long>, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2r, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name = 
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutTensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Self
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Other
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Scalar_Other
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_power, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_power, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<long>, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_compute_linear_combination, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim_min
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = names_dim
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = names_dim_min
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vstack, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vstack, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nansum, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = int_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = Dimname_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hspmm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor_Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name = e
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2, overload_name = 
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histc, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = other
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::msort, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::msort, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = Scalar
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = List
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = ScalarList
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv_, overload_name = Scalar
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul_, overload_name = Scalar
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv_, overload_name = ScalarList
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul_, overload_name = ScalarList
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name = output
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name = output
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::thnn_conv2d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::thnn_conv2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d, overload_name = 
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d_forward, overload_name = output
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_exp2, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_exp2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_digamma, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_digamma, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaln, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaln, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = self_scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = other_scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft2, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftn, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftn, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftn, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftn, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfftn, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfftn, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftfreq, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftfreq, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_det, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_det, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_slogdet, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inner, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inner, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = str_ord
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = str_ord_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorinv, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorinv, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_power, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_power, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_copy, overload_name = Tensor_out
dispatch_key = Functionalize
singature = void (at::Tensor const&, long, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::broadcast_to, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::contiguous, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::MemoryFormat)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = using_ints
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = named_out_dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = using_names
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = DimnameList
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::moveaxis, overload_name = intlist
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::moveaxis, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mT, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ravel, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = int
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = array
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::coalesce, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices, overload_name = 
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_autocast_to_reduced_precision, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool, bool, c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Byte, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Float, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_leaf, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_from_tensor, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dropout, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dropout_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool1d, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_2d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_2d, overload_name = Sequence
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_batch_norm_impl_index_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (long, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, std::array<bool, 3ul>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::block_diag, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution_double_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv1d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv1d, overload_name = padding
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::corrcoef, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummaxmin_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_sparse_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_rowwise_prune, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_sparse_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_full, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic
dispatch_key = Functionalize
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic_alpha
dispatch_key = Functionalize
singature = at::Tensor (long, bool, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic_alpha_beta
dispatch_key = Functionalize
singature = at::Tensor (long, bool, double, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::group_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_group_norm, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, 
long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_distributed, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_neg, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_same_size, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_signed, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_fp16_weight_fp32_activation, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_rank, overload_name = tol
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_rank, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_exp_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosine_similarity, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_channel_shuffle, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pinverse, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scalar_tensor, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_with_names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand_like, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stft, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, c10::optional<bool>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stft, overload_name = center
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, c10::basic_string_view<char>, bool, c10::optional<bool>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tile, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapezoid, overload_name = x
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapezoid, overload_name = dx
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapz, overload_name = x
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapz, overload_name = dx
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_compatible_shallow_copy_type, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vander, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = ScalarSelf
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = ScalarOther
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_differentiable_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dtype
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dim_dtype
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name = Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csr_tensor, overload_name = crow_col_value_size
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsc_tensor, overload_name = ccol_row_value_size
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csr_tensor, overload_name = crow_col_value
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsc_tensor, overload_name = ccol_row_value
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_tensor_unsafe, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_bsc_tensor_unsafe, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_bsr_tensor_args, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_saturate_weight_to_fp16, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::item, overload_name =
dispatch_key = Functionalize
singature = c10::Scalar (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_lstm_cell_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_differentiable_lstm_cell_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu, overload_name = input
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu, overload_name = data
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_lstm_cell, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, 
c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_rnn_relu_cell, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pack_padded_sequence_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name = int_bins
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name = TensorList_bins
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isfinite, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_softmax, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = p
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = float_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::complex, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = dimname
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = dimname_out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2c, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kron, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kron, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linear, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linear, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim_max
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = names_dim
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = names_dim_max
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = names_dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = names_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim_values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = names_dim
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = names_dim_values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = values
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = dimname
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = dimname_out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = dtype_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_ScalarOpt_dim_dtype
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_dtype_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_ScalarOpt_dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frexp, overload_name = Tensor_out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name = dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = dim
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = dim_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_sampled_addmm, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = src
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = reduce
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value_reduce
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = dimname_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name = e
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = other
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, at::Tensor&, at::Tensor const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = Scalar
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = List
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList_out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = ScalarList
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name = out
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid_, overload_name =
dispatch_key = Functionalize
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss_backward, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name = output
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose3d, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col_backward, overload_name = grad_input
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_psi, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_psi, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfinv, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfinv, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtr, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtr, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = self_scalar
dispatch_key = Functionalize
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = self_scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = other_scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = other_scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = self_scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = other_scalar_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expit, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expit, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_round, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_round, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammainc, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammainc, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft2, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft2, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftfreq, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftfreq, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name = U
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svdvals, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svdvals, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_tensor_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_float
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_float_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, double, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = rcond_tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = out_rcond_tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name = out
dispatch_key = Functionalize
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = SymInt_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::SymIntArrayRef, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_copy, overload_name = int_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes_copy, overload_name = out
dispatch_key = Functionalize
singature = void (at::Tensor const&, c10::ArrayRef<long>, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = dim_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind_copy, overload_name = int_out
dispatch_key = Functionalize
singature = void (at::Tensor const&, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = dtype_out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias_copy, overload_name = out
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unpack_dual, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_to, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_to, overload_name = ellipsis_idx
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_neg, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_diagonal, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name = SymInt
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_H, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adjoint, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape_as, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ccol_indices, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_autocast_to_full_precision, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype_layout
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = device
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Device, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = other
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name = dtype
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Long, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_version, overload_name =
dispatch_key = Functionalize
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::retain_grad, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::retains_grad, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_tensors, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_debug_has_internal_overlap, overload_name =
dispatch_key = Functionalize
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_draw, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, at::Tensor const&, long, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_scramble_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_dropout, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_dropout_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alpha_dropout, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alpha_dropout_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chalf, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool1d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool1d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::affine_grid_generator_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_3d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_3d, overload_name = Sequence
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_with_logits_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::broadcast_tensors, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution_mode, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv3d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv3d, overload_name = padding
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagflat, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_diagonal_, overload_name =
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_zeros, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_ones, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::instance_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_complex, overload_name =
dispatch_key = Functionalize
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_int8_weight_fp32_activation, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_int8_weight, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_quantize_weight, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, double, long> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_fp16_weight, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = Dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool1d_with_indices, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_vulkan_available, overload_name =
dispatch_key = Functionalize
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cdist, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::poisson_nll_loss, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_with_names
dispatch_key = Functionalize
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn_like, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_int
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::infinitely_differentiable_gelu_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract_, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_compressed_tensor, overload_name = comp_plain_value_size
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsr_tensor, overload_name = crow_col_value_size
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_compressed_tensor, overload_name = comp_plain_value
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsr_tensor, overload_name = crow_col_value
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csc_tensor_unsafe, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_unsafe, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_coo_tensor_args, overload_name =
dispatch_key = Functionalize
singature = void (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_dense, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_dense_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_tensor_affine_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_channel_affine_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::choose_qparams_optimized, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::combinations, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Tensor
dispatch_key = Functionalize
singature = c10::ScalarType (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar
dispatch_key = Functionalize
singature = c10::ScalarType (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Tensor
dispatch_key = Functionalize
singature = c10::ScalarType (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Scalar
dispatch_key = Functionalize
singature = c10::ScalarType (c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_differentiable_gru_cell_backward, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm, overload_name = input
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, 
bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm, overload_name = data
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru, overload_name = input
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru, overload_name = data
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm_cell, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_gru_cell, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_rnn_tanh_cell, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = Dimname_Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = Dimname_Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = Dimname_Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = Dimname_Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = dimname_src
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = dimname_value
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = dimname
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__and__, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__and__, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__iand__, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__iand__, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__or__, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__or__, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ior__, overload_name = Scalar
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ior__, overload_name = Tensor
dispatch_key = Functionalize
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select_backward, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero_numpy, overload_name =
dispatch_key = Functionalize
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_lu_with_info, overload_name =
dispatch_key = Functionalize
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_nd, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::det, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_string_default, overload_name =
dispatch_key = Functionalize
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dim
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dim
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_out
dispatch_key = Meta
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = Meta
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor_mode
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out_mode
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = Meta
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = Meta
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output_, overload_name =
dispatch_key = Meta
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::Device)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = Meta
singature = at::Tensor (c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor
dispatch_key = Meta
singature = at::Tensor (c10::Scalar const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor_out
dispatch_key = Meta
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutTensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name = out
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<long>, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim_max
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = dim
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim_min
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name = decimals
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = IntList_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = int_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = dtype_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse_, overload_name =
dispatch_key = Meta
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_, overload_name =
dispatch_key = Meta
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear_, overload_name = 
dispatch_key = Meta
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Storage)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = src
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = reduce
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value_reduce
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce_, overload_name = two
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name = X
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name = out
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name =
dispatch_key = Meta
singature = at::Tensor (long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = stable
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values_stable
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name = values
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = 
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = all_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = all_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar_out
dispatch_key = Meta
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor
dispatch_key = Meta
singature = at::Tensor (double, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor_out
dispatch_key = Meta
singature = at::Tensor& (double, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor_out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name = output
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name = out
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name = out
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name = output
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name = output
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name = out
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name = grad_input
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name = out
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name = out
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name = out
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper_, overload_name =
dispatch_key = Meta
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name =
dispatch_key = Meta
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name = out
dispatch_key = Meta
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name =
dispatch_key = Meta
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name = U
dispatch_key = Meta
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = MkldnnCPU
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward_input, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward_weights, overload_name =
dispatch_key = MkldnnCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward, overload_name =
dispatch_key = MkldnnCPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool2d, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool2d_backward, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool3d, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool3d_backward, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name =
dispatch_key = MkldnnCPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm_backward, overload_name =
dispatch_key = MkldnnCPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, std::array<bool, 3ul>)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_reshape, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu_backward, overload_name =
dispatch_key = MkldnnCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose_, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_dense, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_reorder_conv2d_weight, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_reorder_conv3d_weight, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name = out
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_adaptive_avg_pool2d, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_adaptive_avg_pool2d_backward, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name = out
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name = grad_input
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name = out
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name =
dispatch_key = MkldnnCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name = grad_input
dispatch_key = MkldnnCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = NestedTensorCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = NestedTensorCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_transform_bias_rescale_qkv, overload_name =
dispatch_key = NestedTensorCPU
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_from_padded_and_nested_example, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = NestedTensorCPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_padded_tensor, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&, double, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_tensor_layer_norm, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_transformer_encoder_layer_fwd, overload_name =
dispatch_key = NestedTensorCPU
singature = at::Tensor (at::Tensor const&, long, long, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool, double, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_native_multi_head_attention, overload_name =
dispatch_key = NestedTensorCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_batch_norm, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_affine_quantized, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, double, long, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_per_channel_affine_quantized, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_quantized, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim
dispatch_key = QuantizedCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_max_pool1d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_max_pool2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = dim
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim
dispatch_key = QuantizedCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::channel_shuffle, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flip, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dequantize, overload_name = self
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dequantize, overload_name = tensors
dispatch_key = QuantizedCPU
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_scale, overload_name =
dispatch_key = QuantizedCPU
singature = double (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_zero_point, overload_name =
dispatch_key = QuantizedCPU
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_scales, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_zero_points, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_axis, overload_name =
dispatch_key = QuantizedCPU
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::int_repr, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qscheme, overload_name =
dispatch_key = QuantizedCPU
singature = c10::QScheme (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = stable
dispatch_key = QuantizedCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name =
dispatch_key = QuantizedCPU
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::equal, overload_name =
dispatch_key = QuantizedCPU
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name = out
dispatch_key = QuantizedCPU
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = vec
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = vec
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name =
dispatch_key = QuantizedCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cast_Byte(Tensor self, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cast_Char(Tensor self, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cast_Double(Tensor self, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cast_Float(Tensor self, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cast_Int(Tensor self, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cast_Long(Tensor self, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cast_Short(Tensor self, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cast_Half(Tensor self, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_backward(Tensor self, Tensor[] inputs, Tensor? gradient=None, bool? retain_graph=None, bool create_graph=False) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set_data(Tensor(a!) self, Tensor new_data) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::data(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_leaf(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::output_nr(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_version(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::requires_grad_(Tensor(a!) self, bool requires_grad=True) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::retain_grad(Tensor(a!) self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::retains_grad(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fw_primal(Tensor(a) self, int level) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_make_dual(Tensor(a) primal, Tensor tangent, int level) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_unpack_dual(Tensor(a) dual, int level) -> (Tensor(a) primal, Tensor tangent)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_new_zeros_with_same_feature_meta(Tensor self, Tensor other, *, int self_num_batch_dims=0) -> (Tensor)[FTXJ LOG] Dispatcher::registerDef, schema = aten::_has_same_storage_numel(Tensor self, Tensor other) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rename_(Tensor(a!) self, str[]? names) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rename(Tensor(a) self, str[]? names) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::align_to(Tensor(a) self, str[] names) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::align_to.ellipsis_idx(Tensor(a) self, str[] order, int ellipsis_idx) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::align_as(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::align_tensors(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_assert_async(Tensor self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::refine_names(Tensor(a) self, str[] names) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_use_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_use_cudnn_rnn_flatten_weight() -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, bool bidirectional) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? 
dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int proj_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_debug_has_internal_overlap(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_masked_scale(Tensor self, Tensor mask, float scale) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_dropout(Tensor input, float p, bool? train) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_dropout_backward(Tensor grad_output, Tensor mask, float scale) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, int? dtype) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_reshape_from_tensor(Tensor self, Tensor shape) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_shape_as_tensor(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dropout(Tensor input, float p, bool train) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::feature_dropout(Tensor input, float p, bool train) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::alpha_dropout(Tensor input, float p, bool train) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::feature_alpha_dropout(Tensor input, float p, bool train) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::abs(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::abs_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::abs.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::absolute(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::absolute_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::absolute.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::angle(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::angle.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_as_real(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_as_complex(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sgn(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sgn_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sgn.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::chalf(Tensor self, *, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::real(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::imag(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_conj(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conj(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_conj_physical(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conj_physical(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conj_physical.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conj_physical_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resolve_conj(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resolve_neg(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_neg_view(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::acos(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::acos_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::acos.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arccos(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arccos_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arccos.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], bool ceil_mode=False, bool count_include_pad=True) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_add_relu.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_add_relu_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_add_relu.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_add_relu.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_add_relu_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::all.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::all.dimname(Tensor self, str dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::all.dimname_out(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::allclose(Tensor self, Tensor other, float rtol=1.0000000000000001e-05, float atol=1e-08, bool equal_nan=False) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::any.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::any.dimname(Tensor self, str dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::any.dimname_out(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arange(Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arange.start(Scalar start, Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arange.out(Scalar end, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_dim_arange(Tensor like, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::argmax.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::argmin.out(Tensor self, int? dim=None, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::acosh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::acosh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::acosh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arccosh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arccosh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arccosh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::asinh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::asinh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::asinh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arcsinh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arcsinh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arcsinh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atanh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atanh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atanh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctanh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctanh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctanh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> (Tensor(a!))      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::asin(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::asin_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::asin.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arcsin(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arcsin_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arcsin.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atan(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atan_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atan.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctan(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctan_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctan.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atleast_1d(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atleast_1d.Sequence(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atleast_2d(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atleast_2d.Sequence(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atleast_3d(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atleast_3d.Sequence(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bartlett_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bartlett_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor var, float eps, float output_scale, int output_zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, Tensor, int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask, Tensor reservedSpace) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bernoulli(Tensor self, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=1) -> (Tensor)    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=1, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_not(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_not_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copysign.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copysign.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copysign_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copysign.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copysign_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copysign.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_not(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_not_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_xor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_xor_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_and(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_and_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_and.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_or(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_or_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logical_or.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::blackman_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::blackman_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bmm(Tensor self, Tensor mat2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::broadcast_tensors(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::broadcast_to(Tensor(a) self, int[] size) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_broadcast_to(Tensor(a) self, int[] size) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cat(Tensor[] tensors, int dim=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cat.names(Tensor[] tensors, str dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cat.names_out(Tensor[] tensors, str dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::concat(Tensor[] tensors, int dim=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::concat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::concat.names(Tensor[] tensors, str dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::concat.names_out(Tensor[] tensors, str dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::block_diag(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ceil(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ceil_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ceil.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::chain_matmul(Tensor[] matrices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::chain_matmul.out(Tensor[] matrices, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unsafe_chunk(Tensor self, int chunks, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::chunk(Tensor(a -> *) self, int chunks, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tensor_split.sections(Tensor(a -> *) self, int sections, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tensor_split.indices(Tensor(a -> *) self, int[] indices, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tensor_split.tensor_indices_or_sections(Tensor(a -> *) self, Tensor tensor_indices_or_sections, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_max(Tensor self, Scalar max) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_max.Tensor(Tensor self, Tensor max) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_max_(Tensor(a!) self, Scalar max) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_max_.Tensor(Tensor(a!) self, Tensor max) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_max.Tensor_out(Tensor self, Tensor max, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_min(Tensor self, Scalar min) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_min.Tensor(Tensor self, Tensor min) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_min_(Tensor(a!) self, Scalar min) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_min_.Tensor(Tensor(a!) self, Tensor min) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clamp_min.Tensor_out(Tensor self, Tensor min, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clip(Tensor self, Scalar? min=None, Scalar? max=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clip.Tensor(Tensor self, Tensor? min=None, Tensor? max=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clip_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clip_.Tensor(Tensor(a!) self, Tensor? min=None, Tensor? max=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clip.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clip.Tensor_out(Tensor self, Tensor? min=None, Tensor? max=None, *, Tensor(a!) out) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_is_acceptable(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::complex(Tensor real, Tensor imag) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::complex.out(Tensor real, Tensor imag, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::polar(Tensor abs, Tensor angle) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::polar.out(Tensor abs, Tensor angle, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::contiguous(Tensor(a) self, *, int memory_format=0) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::convolution_backward(Tensor grad_output, Tensor input, Tensor weight, int[]? bias_sizes, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool allow_tf32) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_convolution.deprecated(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] 
dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_convolution_mode(Tensor input, Tensor weight, Tensor? bias, int[] stride, str padding, int[] dilation, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=[1], int[1] padding=[0], int[1] dilation=[1], int groups=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1], int groups=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 
0], int[3] dilation=[1, 1, 1], int groups=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv1d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=[1], str padding="valid", int[1] dilation=[1], int groups=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv2d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=[1, 1], str padding="valid", int[2] dilation=[1, 1], int groups=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv3d.padding(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=[1, 1, 1], str padding="valid", int[3] dilation=[1, 1, 1], int groups=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, 
Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=[1], int[1] padding=[0], int[1] output_padding=[0], int groups=1, int[1] dilation=[1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int groups=1, int[2] dilation=[1, 1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int groups=1, int[3] dilation=[1, 1, 1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copy(Tensor self, Tensor src, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_copy_from_and_resize(Tensor self, Tensor dst) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cos(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cos_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cos.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cosh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cosh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cosh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0., int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::count_nonzero.dim_IntList(Tensor self, int[] dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::count_nonzero(Tensor self, int? dim=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cov(Tensor self, *, int correction=1, Tensor? fweights=None, Tensor? aweights=None) -> (Tensor)       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::corrcoef(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> (Tensor grid)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> (Tensor grad_theta)  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon, Tensor reserveSpace) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_convolution(Tensor self, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool allow_tf32) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mps_convolution_transpose(Tensor self, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mps_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool[2] output_mask) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_convolution_relu(Tensor self, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_convolution_add_relu(Tensor self, Tensor weight, Tensor z, Scalar? alpha, Tensor? bias, int[] stride, int[] padding, int[] dilation, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_grid_sampler(Tensor self, Tensor grid) -> (Tensor output)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummax(Tensor self, int dim) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummax.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummax.dimname(Tensor self, str dim) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummax.dimname_out(Tensor self, str dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cummax_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummin(Tensor self, int dim) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummin.out(Tensor self, int dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummin.dimname(Tensor self, str dim) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummin.dimname_out(Tensor self, str dim, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cummin_helper(Tensor self, Tensor(a!) values, Tensor(b!) indices, int dim) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cummaxmin_backward(Tensor grad, Tensor input, Tensor indices, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumprod(Tensor self, int dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumprod_(Tensor(a!) self, int dim, *, int? dtype=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumprod.out(Tensor self, int dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumprod.dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumprod_.dimname(Tensor(a!) self, str dim, *, int? dtype=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumprod.dimname_out(Tensor self, str dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumprod_backward(Tensor grad, Tensor input, int dim, Tensor output) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumsum(Tensor self, int dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumsum_(Tensor(a!) self, int dim, *, int? dtype=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumsum.out(Tensor self, int dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumsum.dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumsum_.dimname(Tensor(a!) self, str dim, *, int? dtype=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumsum.dimname_out(Tensor self, str dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumulative_trapezoid.x(Tensor y, Tensor x, *, int dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cumulative_trapezoid.dx(Tensor y, *, Scalar dx=1, int dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=1, bool zero_infinity=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=1, bool zero_infinity=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diagflat(Tensor self, int offset=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_diagonal(Tensor(a) A, *, int offset=0, int dim1=-2, int dim2=-1) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diagonal.Dimname(Tensor(a) self, *, str outdim, str dim1, str dim2, int offset=0) -> (Tensor(a))      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diagonal_backward(Tensor grad_output, int[] input_sizes, int offset, int dim1, int dim2) -> (Tensor)  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diff(Tensor self, int n=1, int dim=-1, Tensor? prepend=None, Tensor? append=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diff.out(Tensor self, int n=1, int dim=-1, Tensor? prepend=None, Tensor? append=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gradient.scalarint(Tensor self, *, Scalar? spacing=None, int? dim=None, int edge_order=1) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gradient.scalararray(Tensor self, *, Scalar spacing, int[] dim, int edge_order=1) -> (Tensor[])       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gradient.array(Tensor self, *, int[] dim, int edge_order=1) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gradient.scalarrayint(Tensor self, *, Scalar[] spacing, int? dim=None, int edge_order=1) -> (Tensor[])[FTXJ LOG] Dispatcher::registerDef, schema = aten::gradient.scalarrayarray(Tensor self, *, Scalar[] spacing, int[] dim, int edge_order=1) -> (Tensor[])  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gradient.tensorarrayint(Tensor self, *, Tensor[] spacing, int? dim=None, int edge_order=1) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gradient.tensorarray(Tensor self, *, Tensor[] spacing, int[] dim, int edge_order=1) -> (Tensor[])     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> (Tensor(a!))        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide.Tensor_mode(Tensor self, Tensor other, *, str? rounding_mode) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide_.Tensor_mode(Tensor(a!) self, Tensor other, *, str? rounding_mode) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide.out_mode(Tensor self, Tensor other, *, str? rounding_mode, Tensor(a!) out) -> (Tensor(a!))     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide.Scalar_mode(Tensor self, Scalar other, *, str? rounding_mode) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::divide_.Scalar_mode(Tensor(a!) self, Scalar other, *, str? rounding_mode) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::true_divide.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::true_divide_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::true_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::true_divide.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::true_divide_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dot(Tensor self, Tensor tensor) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::vdot(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::vdot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::einsum(str equation, Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_embedding_bag_forward_only(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_rowwise_prune(Tensor weight, Tensor mask, int compressed_indices_dtype) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::row_stack(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::row_stack.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding_bag.padding_idx(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq, int 
mode, bool sparse, Tensor? per_sample_weights, bool include_last_offset, int? padding_idx) -> (Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False, int padding_idx=-1) -> (Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, int padding_idx=-1) -> (Tensor)  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor 
bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offset2bag, Tensor bag_size, Tensor 
maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights, int padding_idx=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode, int padding_idx=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::empty.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::empty.memory_format(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::new_empty(Tensor self, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::new_empty_strided(Tensor self, int[] size, int[] stride, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::new_full(Tensor self, int[] size, Scalar fill_value, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::new_zeros(Tensor self, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::new_ones(Tensor self, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_empty_affine_quantized(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, float scale=1., int zero_point=0, int? memory_format=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize_(Tensor(a!) self, int[] size, *, int? memory_format=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_resize_output_(Tensor(a!) self, int[] size, Device device) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::empty_quantized(int[] size, Tensor qtensor, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::empty.out(int[] size, *, int? memory_format=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::empty_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::empty_strided(int[] size, int[] stride, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erf(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erf_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erf.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erfc(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erfc_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erfc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exp(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exp_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exp.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exp2(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exp2_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exp2.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expm1(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expm1_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expm1.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expand.SymInt(Tensor(a) self, SymInt[] size, *, bool implicit=False) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expand_as(Tensor(a) self, Tensor other) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eye(int n, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eye.m(int n, int m, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) 
-> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eye.out(int n, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::flatten.using_ints(Tensor(a) self, int start_dim=0, int end_dim=-1) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::flatten.named_out_dim(Tensor(a) self, int start_dim, int end_dim, str out_dim) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::flatten.using_names(Tensor(a) self, str start_dim, str end_dim, str out_dim) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::flatten.DimnameList(Tensor(a) self, str[] dims, str out_dim) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unflatten.int(Tensor(a) self, int dim, int[] sizes, str[]? names=None) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unflatten.Dimname(Tensor(a) self, str dim, int[] sizes, str[] names) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fill.Scalar(Tensor self, Scalar value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fill.Tensor(Tensor self, Tensor value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::floor(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::floor_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::floor.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::floor_divide(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::floor_divide_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::floor_divide.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::floor_divide.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::floor_divide_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::frac(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::frac_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::frac.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::full.names(int[] size, Scalar fill_value, *, str[]? names, int? dtype=None, int? layout=None, Device? 
device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::full(int[] size, Scalar fill_value, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::full_like(Tensor self, Scalar fill_value, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::from_file(str filename, bool? shared=None, int? size=0, *, int? dtype=None, int? layout=None, Device? 
device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gcd.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gcd(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gcd_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lcm.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lcm(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lcm_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) 
-> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_grid_sampler_2d_cpu_fallback(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_grid_sampler_2d_cpu_fallback_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners, bool[2] output_mask) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hann_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hann_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hamming_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hamming_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, int? dtype=None, int? 
layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, int? 
dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kaiser_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kaiser_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kaiser_window.beta(int window_length, bool periodic, float beta, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1., int reduction=1) -> (Tensor)        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1.0000000000000001e-05, bool cudnn_enabled=True) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_group_norm(Tensor input, Tensor? weight, Tensor? bias, int N, int C, int HxW, int group, float 
eps) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_group_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int N, int C, int HxW, int group, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fft_r2c(Tensor self, int[] dim, int normalization, bool onesided) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fft_r2c.out(Tensor self, int[] dim, int normalization, bool onesided, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fft_c2r(Tensor self, int[] dim, int normalization, int last_dim_size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fft_c2r.out(Tensor self, int[] dim, int normalization, int last_dim_size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fft_c2c(Tensor self, int[] dim, int normalization, bool forward) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fft_c2c.out(Tensor self, int[] dim, int normalization, bool forward, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cufft_get_plan_cache_size(int device_index) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cufft_get_plan_cache_max_size(int device_index) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cufft_set_plan_cache_max_size(int device_index, int max_size) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cufft_clear_plan_cache(int device_index) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index.Tensor(Tensor self, Tensor?[] indices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_copy.out(Tensor self, int dim, Tensor index, Tensor source, *, Tensor(a!) out) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_copy_.dimname(Tensor(a!) self, str dim, Tensor index, Tensor source) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_copy.dimname(Tensor self, str dim, Tensor index, Tensor source) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::inverse(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::inverse.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isclose(Tensor self, Tensor other, float rtol=1.0000000000000001e-05, float atol=1e-08, bool equal_nan=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isin.Tensor_Tensor_out(Tensor elements, Tensor test_elements, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isin.Tensor_Tensor(Tensor elements, Tensor test_elements, *, bool assume_unique=False, bool invert=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isin.Tensor_Scalar_out(Tensor elements, Scalar test_element, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isin.Tensor_Scalar(Tensor elements, Scalar test_element, *, bool assume_unique=False, bool invert=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isin.Scalar_Tensor_out(Scalar element, Tensor test_elements, *, bool assume_unique=False, bool invert=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isin.Scalar_Tensor(Scalar element, Tensor test_elements, *, bool assume_unique=False, bool invert=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isnan(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_distributed(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_floating_point(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_complex(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_conj(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_is_zerotensor(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_neg(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isreal(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_nonzero(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_same_size(Tensor self, Tensor other) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_signed(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_inference(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kl_div(Tensor self, Tensor target, int reduction=1, *, bool log_target=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=1, *, bool log_target=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kron(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kron.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kthvalue.values(Tensor self, int k, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kthvalue.dimname(Tensor self, int k, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::kthvalue.dimname_out(Tensor self, int k, str dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1.0000000000000001e-05, bool cudnn_enable=True) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_layer_norm(Tensor input, int[] normalized_shape, Tensor? weight, Tensor? bias, float eps) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_layer_norm_backward(Tensor grad_out, Tensor input, int[] normalized_shape, Tensor mean, Tensor 
rstd, Tensor? weight, Tensor? bias, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nan_to_num(Tensor self, float? nan=None, float? posinf=None, float? neginf=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nan_to_num_(Tensor(a!) self, float? nan=None, float? posinf=None, float? neginf=None) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nan_to_num.out(Tensor self, float? nan=None, float? posinf=None, float? neginf=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linear.out(Tensor input, Tensor weight, Tensor? bias=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mps_linear(Tensor self, Tensor weight, Tensor? bias=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_linear(Tensor self, Tensor weight, Tensor? bias=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_linear_backward_input(int[] input_size, Tensor grad_output, Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_linear_backward_weights(Tensor grad_output, Tensor input, Tensor weight, bool bias_defined) -> 
(Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_linear_backward(Tensor self, Tensor grad_output, Tensor weight, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mps_linear_backward_input(int[] input_size, Tensor grad_output, Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mps_linear_backward_weights(Tensor grad_output, Tensor input, Tensor weight, bool bias_defined) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mps_linear_backward(Tensor self, Tensor grad_output, Tensor weight, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> (Tensor)[FTXJ LOG] Dispatcher::registerDef, schema = aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fbgemm_pack_quantized_matrix(Tensor input) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ldexp.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ldexp_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ldexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linspace(Scalar start, Scalar end, int steps, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linspace.out(Scalar start, Scalar end, int steps, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log10(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log10_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log10.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log1p(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log1p_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log1p.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log2(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log2_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log2.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logaddexp.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logaddexp(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logaddexp2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logaddexp2(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::xlogy.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::xlogy.Scalar_Self(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::xlogy.Scalar_Other(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::xlogy_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::xlogy_.Scalar_Other(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::xlogy.OutTensor(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::xlogy.OutScalar_Self(Scalar self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::xlogy.OutScalar_Other(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logdet(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logspace(Scalar start, Scalar end, int steps, float base=10., *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logspace.out(Scalar start, Scalar end, int steps, float base=10., *, Tensor(a!) out) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_softmax.int(Tensor self, int dim, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_softmax.int_out(Tensor self, int dim, int? dtype=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_softmax.Dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_log_softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, int input_dtype) -> (Tensor)   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_log_softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, int input_dtype, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_logcumsumexp(Tensor self, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logcumsumexp(Tensor self, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logcumsumexp.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logcumsumexp.dimname(Tensor self, str dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logcumsumexp.dimname_out(Tensor self, str dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logsumexp.names(Tensor self, str[1] dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logsumexp.names_out(Tensor self, str[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0., int reduction=1) -> 
(Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matmul(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matrix_rank(Tensor self, bool symmetric=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matrix_power(Tensor self, int n) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matrix_power.out(Tensor self, int n, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matrix_exp(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matrix_exp_backward(Tensor self, Tensor grad) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_aminmax(Tensor self) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_aminmax.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::aminmax(Tensor self, *, int? dim=None, bool keepdim=False) -> (Tensor min, Tensor max)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::aminmax.out(Tensor self, *, int? dim=None, bool keepdim=False, Tensor(a!) min, Tensor(b!) max) -> (Tensor(a!) min, Tensor(b!) max)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_compute_linear_combination(Tensor input, Tensor coefficients) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_compute_linear_combination.out(Tensor input, Tensor coefficients, *, Tensor(a!) out) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max.dim_max(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max.names_dim(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max.names_dim_max(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) max, Tensor(b!) max_values) 
-> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::value_selecting_reduction_backward(Tensor grad, int dim, Tensor indices, int[] sizes, bool keepdim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::amax(Tensor self, int[1] dim=[], bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::amax.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], int[1] 
dilation=[1], bool ceil_mode=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], int[1] dilation=[1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mps_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mps_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride=[], int[2] 
padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_max_pool2d_backward(Tensor grad_output, Tensor output, Tensor input, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] 
dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_max_pool3d_backward(Tensor grad_output, Tensor output, Tensor input, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], int[1] dilation=[1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] 
dilation=[1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mean(Tensor self, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mean.names_dim(Tensor self, str[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mean.names_out(Tensor self, str[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanmean(Tensor self, int[1] dim=[], bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanmean.out(Tensor self, int[1] dim=[], bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::median(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::median.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) 
-> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::median.names_dim(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::median.names_dim_values(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanmedian(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanmedian.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanmedian.dim_values(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanmedian.names_dim(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanmedian.names_dim_values(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) 
indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::min.dim_min(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::min.names_dim(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::min.names_dim_min(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) min, Tensor(b!) min_indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::amin(Tensor self, int[1] dim=[], bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::amin.out(Tensor self, int[1] dim=[], bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mps_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mps_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, 
int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, 
Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[]) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mm(Tensor self, Tensor mat2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_mm(Tensor sparse, Tensor dense) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_sparse_matmul(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_mask_helper(Tensor t, Tensor mask_indices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mode.values(Tensor self, int dim=-1, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> 
(Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mode.dimname(Tensor self, str dim, bool keepdim=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mode.dimname_out(Tensor self, str dim, bool keepdim=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mul.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mul.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multiply.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multiply_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multiply.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multiply.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multiply_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mv(Tensor self, Tensor vec) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mvlgamma.out(Tensor self, int p, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mvlgamma(Tensor self, int p) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mvlgamma_(Tensor(a!) self, int p) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::narrow_copy(Tensor self, int dim, int start, int length) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::narrow_copy.SymInt(Tensor self, int dim, int start, SymInt length) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::narrow_copy.out(Tensor self, int dim, int start, int length, *, Tensor(a!) out) -> (Tensor(a!))       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::narrow(Tensor(a) self, int dim, int start, int length) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::narrow.Tensor(Tensor(a) self, int dim, Tensor start, int length) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_batch_norm.out(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, *, Tensor(a!) out, Tensor(b!) save_mean, Tensor(c!) save_invstd) -> (Tensor(a!), Tensor(b!), Tensor(c!))[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm_elemt.out(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, Tensor counts) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, 
bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu, Tensor count) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_vulkan_available() -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_nnpack_available() -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding, int[2] stride=[1, 1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ones.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? 
pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ones(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> 
(Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ones.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ones_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pairwise_distance(Tensor x1, Tensor x2, float p=2., float eps=9.9999999999999995e-07, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cdist(Tensor x1, Tensor x2, float p=2., int? compute_mode=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_euclidean_dist(Tensor x1, Tensor x2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cdist_forward(Tensor x1, Tensor x2, float p, int? compute_mode) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pdist(Tensor self, float p=2.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_pdist_forward(Tensor self, float p=2.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::permute(Tensor(a) self, int[] dims) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::movedim.intlist(Tensor(a) self, int[] source, int[] destination) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::movedim.int(Tensor(a) self, int source, int destination) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::moveaxis.intlist(Tensor(a) self, int[] source, int[] destination) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::moveaxis.int(Tensor(a) self, int source, int destination) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::numpy_T(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::matrix_H(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mT(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mH(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adjoint(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pixel_shuffle(Tensor self, int upscale_factor) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pixel_unshuffle(Tensor self, int downscale_factor) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::channel_shuffle(Tensor self, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_channel_shuffle(Tensor self, int groups) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_pinned(Tensor self, Device? device=None) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pin_memory(Tensor(a) self, Device? device=None) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_pin_memory(Tensor self, Device? device=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pinverse(Tensor self, float rcond=1.0000000000000001e-15) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> 
(Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rad2deg(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rad2deg_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rad2deg.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::deg2rad(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::deg2rad_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::deg2rad.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scalar_tensor(Scalar s, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rand.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? 
pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rand.generator_with_names(int[] size, *, Generator? generator, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rand(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> 
(Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rand.generator(int[] size, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rand.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rand.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rand_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint(int high, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint.generator(int high, int[] size, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint.low(int low, int high, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, 
bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint.low_generator(int low, int high, int[] size, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint.generator_out(int high, int[] size, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint.low_generator_out(int low, int high, int[] size, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint_like(Tensor self, int high, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randint_like.low_dtype(Tensor self, int low, int high, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randn(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randn.generator(int[] size, *, Generator? generator, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randn.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randn.generator_with_names(int[] size, *, Generator? generator, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randn.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randn.generator_out(int[] size, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randn_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randperm(int n, *, int? dtype=4, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randperm.generator(int n, *, Generator? generator, int? dtype=4, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randperm.out(int n, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::randperm.generator_out(int n, *, Generator? generator, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::range.step(Scalar start, Scalar end, Scalar step=1, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::range(Scalar start, Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ravel(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reciprocal(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reciprocal_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::neg(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::neg_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::neg.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::negative(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::negative_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::negative.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::repeat(Tensor self, int[] repeats) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::repeat_interleave.Tensor(Tensor repeats, *, int? output_size=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None, *, int? output_size=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None, *, int? output_size=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reshape(Tensor(a) self, int[] shape) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_reshape_alias(Tensor(a) self, int[] size, int[] stride) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mkldnn_reshape(Tensor self, int[] shape) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reshape_as(Tensor(a) self, Tensor other) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::round(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::round_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::round.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::round.decimals(Tensor self, *, int decimals) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::round_.decimals(Tensor(a!) self, *, int decimals) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::round.decimals_out(Tensor self, *, int decimals, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::relu(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::relu_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::relu6(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::relu6_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::prelu(Tensor self, Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gelu.out(Tensor self, *, str approximate="none", Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gelu_(Tensor(a!) self, *, str approximate="none") -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gelu(Tensor self, *, str approximate="none") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gelu_backward.grad_input(Tensor grad_output, Tensor self, *, str approximate="none", Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gelu_backward(Tensor grad_output, Tensor self, *, str approximate="none") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::infinitely_differentiable_gelu_backward(Tensor grad, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardshrink(Tensor self, Scalar lambd=0.5) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardshrink_backward.grad_input(Tensor grad_out, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rsqrt(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rsqrt_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::select.Dimname(Tensor(a) self, str dim, int index) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::select.int(Tensor(a) self, int dim, int index) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::select_backward(Tensor grad_output, int[] input_sizes, int dim, int index) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::selu(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::selu_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::celu(Tensor self, Scalar alpha=1.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::celu_(Tensor(a!) self, Scalar alpha=1.) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::silu(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::silu_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::silu.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::silu_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::silu_backward(Tensor grad_output, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mish(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mish_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mish.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mish_backward(Tensor grad_output, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sigmoid(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sigmoid_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logit(Tensor self, float? eps=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logit_(Tensor(a!) self, float? eps=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logit.out(Tensor self, float? eps=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sin(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sin_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sin.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sinc(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sinc_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sinc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sinh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sinh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sinh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::detach(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::detach_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::size.int(Tensor self, int dim) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::size.Dimname(Tensor self, str dim) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slice.Tensor(Tensor(a) self, int dim=0, int? start=None, int? end=None, int step=1) -> (Tensor(a))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slice_backward(Tensor grad_output, int[] input_sizes, int dim, int start, int end, int step) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slice_scatter(Tensor self, Tensor src, int dim=0, int? start=None, int? end=None, int step=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::select_scatter(Tensor self, Tensor src, int dim, int index) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diagonal_scatter(Tensor self, Tensor src, int offset=0, int dim1=0, int dim2=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::smm(Tensor self, Tensor mat2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softmax.int(Tensor self, int dim, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softmax.int_out(Tensor self, int dim, int? dtype=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softmax.Dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_softmax.out(Tensor self, int dim, bool half_to_float, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, int input_dtype) -> (Tensor)       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_softmax_backward_data.out(Tensor grad_output, Tensor output, int dim, int input_dtype, *, Tensor(a!) 
grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unsafe_split.Tensor(Tensor self, int split_size, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::split.Tensor(Tensor(a -> *) self, int split_size, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::split.sizes(Tensor(a -> *) self, int[] split_size, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unsafe_split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::split_with_sizes(Tensor(a -> *) self, int[] split_sizes, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hsplit.int(Tensor(a -> *) self, int sections) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hsplit.array(Tensor(a -> *) self, int[] indices) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::vsplit.int(Tensor(a -> *) self, int sections) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::vsplit.array(Tensor(a -> *) self, int[] indices) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dsplit.int(Tensor(a -> *) self, int sections) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dsplit.array(Tensor(a -> *) self, int[] indices) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze.dim(Tensor(a) self, int dim) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze.dimname(Tensor(a) self, str dim) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze_.dim(Tensor(a!) self, int dim) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze_.dimname(Tensor(a!) self, str dim) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) 
-> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::stack(Tensor[] tensors, int dim=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_stack(Tensor[] tensors, int dim=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hstack(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hstack.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::vstack(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::vstack.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dstack(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dstack.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool? onesided=None, bool? return_complex=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::stft.center(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool center=True, str pad_mode="reflect", bool normalized=False, bool? onesided=None, bool? return_complex=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::istft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool center=True, bool normalized=False, bool? onesided=None, int? length=None, bool return_complex=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::stride.int(Tensor self, int dim) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::stride.Dimname(Tensor self, str dim) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sum(Tensor self, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sum.dim_DimnameList(Tensor self, str[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sum.DimnameList_out(Tensor self, str[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nansum(Tensor self, int[1] dim=[], bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nansum.out(Tensor self, int[1] dim=[], bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sum_to_size(Tensor self, int[] size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sqrt(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sqrt_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::square(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::square_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::square.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std(Tensor self, bool unbiased=True) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std_mean.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std_mean.names_dim(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std_mean.correction_names(Tensor self, str[1] dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std.correction_out(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std.names_dim(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std.names_out(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std.correction_names(Tensor self, str[1] dim, *, int? correction, bool keepdim=False) -> (Tensor)     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::std.correction_names_out(Tensor self, str[1] dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::prod(Tensor self, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::prod.dim_Dimname(Tensor self, str dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::prod.Dimname_out(Tensor self, str dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::t(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::t_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tan(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tan_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tan.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tanh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tanh_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tanh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tensordot.out(Tensor self, Tensor other, int[] dims_self, int[] dims_other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::threshold(Tensor self, Scalar threshold, Scalar value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::threshold_backward.grad_input(Tensor grad_output, Tensor self, Scalar threshold, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tile(Tensor self, int[] dims) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::transpose.int(Tensor(a) self, int dim0, int dim1) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::transpose.Dimname(Tensor(a) self, str dim0, str dim1) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mkldnn_transpose(Tensor self, int dim0, int dim1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::one_hot(Tensor self, int num_classes=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::flip(Tensor self, int[] dims) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fliplr(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::flipud(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rot90(Tensor self, int k=1, int[] dims=[0, 1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trapezoid.x(Tensor y, Tensor x, *, int dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trapezoid.dx(Tensor y, *, Scalar dx=1, int dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trapz.dx(Tensor y, *, float dx=1., int dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_transform_bias_rescale_qkv(Tensor qkv, Tensor qkv_bias, int num_heads) -> (Tensor, Tensor, Tensor)   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_nested_tensor_from_mask(Tensor t, Tensor mask) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_nested_from_padded(Tensor padded, Tensor cpu_nested_shape_example, bool fuse_transform_0213=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_nested_from_padded_and_nested_example(Tensor padded, Tensor nt_example) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1., float p=2., float eps=9.9999999999999995e-07, bool swap=False, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trunc(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trunc_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trunc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fix(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fix_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fix.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::type_as(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_unsafe_view(Tensor self, int[] size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unsqueeze(Tensor(a) self, int dim) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unsqueeze_(Tensor(a!) self, int dim) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::vander(Tensor x, int? N=None, bool increasing=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var(Tensor self, bool unbiased=True) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var.correction_out(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var.names_dim(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var.names_out(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var.correction_names(Tensor self, str[1] dim, *, int? correction, bool keepdim=False) -> (Tensor)     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var.correction_names_out(Tensor self, str[1] dim, *, int? correction, bool keepdim=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var_mean.correction(Tensor self, int[1]? dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var_mean.names_dim(Tensor self, str[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::var_mean.correction_names(Tensor self, str[1] dim, *, int? correction, bool keepdim=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_as(Tensor(a) self, Tensor other) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::where.self(Tensor condition, Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::where.self_out(Tensor condition, Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::where.ScalarSelf(Tensor condition, Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::where.ScalarOther(Tensor condition, Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::where.Scalar(Tensor condition, Scalar self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::where(Tensor condition) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_weight_norm_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_weight_norm_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::zeros.names(int[] size, *, str[]? names, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_efficientzerotensor(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::zeros(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::zeros.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::zeros_like(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_standard_gamma_grad(Tensor self, Tensor output) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_standard_gamma(Tensor self, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sample_dirichlet(Tensor self, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::poisson(Tensor self, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::binomial(Tensor count, Tensor prob, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_norm(Tensor self, Scalar p=2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::native_norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, int? dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_sum(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_sum.dtype(Tensor self, *, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_sum.dim(Tensor self, int[1] dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_csr_sum.dim_dtype(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_csr_prod.dim_dtype(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_softmax.int(Tensor self, int dim, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_softmax.Dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> (Tensor)    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_log_softmax.int(Tensor self, int dim, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_log_softmax.Dimname(Tensor self, str dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_log_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> (Tensor)[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.Scalar(Tensor self, Scalar p=2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, int dtype) -> (Tensor)  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, int dtype, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.names_ScalarOpt_dim_dtype(Tensor self, Scalar? p, str[1] dim, bool keepdim, *, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.names_ScalarOpt_dim(Tensor self, Scalar? p, str[1] dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.names_dtype_out(Tensor self, Scalar? p, str[1] dim, bool keepdim, *, int dtype, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::norm.names_out(Tensor self, Scalar? p, str[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::frexp.Tensor(Tensor self) -> (Tensor mantissa, Tensor exponent)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::frexp.Tensor_out(Tensor self, *, Tensor(a!) mantissa, Tensor(b!) exponent) -> (Tensor(a!) mantissa, Tensor(b!) exponent)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::frobenius_norm(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nuclear_norm(Tensor self, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::clone(Tensor self, *, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::positive(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize_as_(Tensor(a!) self, Tensor the_template, *, int? memory_format=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize_as_sparse_(Tensor(a!) self, Tensor the_template) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::zero_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::subtract.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::subtract.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::subtract_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::subtract.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::subtract_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::heaviside.out(Tensor self, Tensor values, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::heaviside(Tensor self, Tensor values) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::heaviside_(Tensor(a!) self, Tensor values) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_sampled_addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_sampled_addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> 
(Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_addmm_activation.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, bool use_gelu=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_addmm_activation(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, bool use_gelu=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_compressed_tensor.comp_plain_value_size(Tensor compressed_indices, Tensor plain_indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_csr_tensor.crow_col_value_size(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_csc_tensor.ccol_row_value_size(Tensor ccol_indices, Tensor row_indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_bsr_tensor.crow_col_value_size(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_bsc_tensor.ccol_row_value_size(Tensor ccol_indices, Tensor row_indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_compressed_tensor.comp_plain_value(Tensor compressed_indices, Tensor plain_indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_csr_tensor.crow_col_value(Tensor crow_indices, Tensor col_indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_csc_tensor.ccol_row_value(Tensor ccol_indices, Tensor row_indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_bsr_tensor.crow_col_value(Tensor crow_indices, Tensor col_indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_bsc_tensor.ccol_row_value(Tensor ccol_indices, Tensor row_indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_compressed_tensor_unsafe(Tensor compressed_indices, Tensor plain_indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_csr_tensor_unsafe(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size, *, int? 
dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_csc_tensor_unsafe(Tensor ccol_indices, Tensor row_indices, Tensor values, int[] size, *, int? 
dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_bsr_tensor_unsafe(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size, *, int? 
dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_bsc_tensor_unsafe(Tensor ccol_indices, Tensor row_indices, Tensor values, int[] size, *, int? 
dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_coo_tensor.size(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_validate_sparse_coo_tensor_args(Tensor indices, Tensor values, int[] size) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_validate_sparse_compressed_tensor_args(Tensor compressed_indices, Tensor plain_indices, Tensor values, int[] size, int layout) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_validate_sparse_csr_tensor_args(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_validate_sparse_csc_tensor_args(Tensor ccol_indices, Tensor row_indices, Tensor values, int[] size) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_validate_sparse_bsr_tensor_args(Tensor crow_indices, Tensor col_indices, Tensor values, int[] size) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_validate_sparse_bsc_tensor_args(Tensor ccol_indices, Tensor row_indices, Tensor values, int[] size) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_mask(Tensor self, Tensor mask) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_to_cpu(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_dense(Tensor self, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_to_dense(Tensor self, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_dense_backward(Tensor grad, Tensor input) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_dim(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_dimI(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dense_dim(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_dimV(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_nnz(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::coalesce(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_coalesce(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_coalesced(Tensor self) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_indices(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_values(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_coalesced_(Tensor(a!) self, bool coalesced) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::indices(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::values(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::crow_indices(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::col_indices(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ccol_indices(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::row_indices(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hspmm(Tensor mat1, Tensor mat2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unbind.int(Tensor(a -> *) self, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unbind.Dimname(Tensor(a -> *) self, str dim) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_sparse.sparse_dim(Tensor self, int sparse_dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_sparse(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_sparse_csr(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_sparse_csc(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_sparse_bsr(Tensor self, int[2] blocksize) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_sparse_bsc(Tensor self, int[2] blocksize) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_mkldnn(Tensor self, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=[0, 0], int[2] stride=[1, 1], int[2] dilation=[1, 1], int groups=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_reorder_conv3d_weight(Tensor self, int[3] padding=[0, 0, 0], int[3] stride=[1, 1, 1], int[3] dilation=[1, 1, 1], int groups=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_mkldnn_backward(Tensor grad, Tensor input) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantize_per_tensor_dynamic(Tensor self, int dtype, bool reduce_range) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantize_per_tensor(Tensor self, float scale, int zero_point, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantize_per_tensor.tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantize_per_tensor.tensors(Tensor[] tensors, Tensor scales, Tensor zero_points, int dtype) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, int dtype) -> (Tensor) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dequantize.self(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dequantize.tensors(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::q_scale(Tensor self) -> (float)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::q_zero_point(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::q_per_channel_scales(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::q_per_channel_zero_points(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::q_per_channel_axis(Tensor self) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::int_repr(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> (Tensor)[FTXJ LOG] Dispatcher::registerDef, schema = aten::qscheme(Tensor self) -> (QScheme)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fake_quantize_per_tensor_affine.tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fake_quantize_per_tensor_affine_cachemask(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fake_quantize_per_tensor_affine_cachemask_tensor_qparams(Tensor self, Tensor scale, Tensor zero_point, Tensor fake_quant_enabled, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fake_quantize_per_tensor_affine_cachemask_backward(Tensor grad, Tensor mask) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fake_quantize_learnable_per_tensor_affine(Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max, float grad_factor=1.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fake_quantize_learnable_per_tensor_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int quant_min, int quant_max, float grad_factor=1.) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fake_quantize_per_channel_affine_cachemask(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor output, Tensor mask)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fake_quantize_per_channel_affine_cachemask_backward(Tensor grad, Tensor mask) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fake_quantize_learnable_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max, float grad_factor=1.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fake_quantize_learnable_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max, float grad_factor=1.) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fused_moving_avg_obs_fake_quant(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fused_moving_avg_obs_fq_helper(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_choose_qparams_per_tensor(Tensor self, bool reduce_range=False) -> (float, int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_saturate_weight_to_fp16(Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::choose_qparams_optimized(Tensor input, int numel, int n_bins, float ratio, int bit_width) -> (Tensor, 
Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_autocast_to_reduced_precision(Tensor(a) self, bool cuda_enabled, bool cpu_enabled, int cuda_dtype, int cpu_dtype) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_autocast_to_full_precision(Tensor(a) self, bool cuda_enabled, bool cpu_enabled) -> (Tensor(a))       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_to_copy(Tensor self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, bool non_blocking=False, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to.dtype_layout(Tensor(a) self, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to.device(Tensor(a) self, Device device, int dtype, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to.dtype(Tensor(a) self, int dtype, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to.other(Tensor(a) self, Tensor other, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::meshgrid(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::meshgrid.indexing(Tensor[] tensors, *, str indexing) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cartesian_prod(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::item(Tensor self) -> (Scalar)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::result_type.Tensor(Tensor tensor, Tensor other) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::result_type.Scalar(Tensor tensor, Scalar other) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::can_cast(int from, int to) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::promote_types(int type1, int type2) -> (int)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_local_scalar_dense(Tensor self) -> (Scalar)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_lstm_mps(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, 
bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lstm_mps_backward(Tensor grad_y, Tensor? grad_hy, Tensor? grad_cy, Tensor z_state, Tensor cell_state_fwd, Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor[], Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_thnn_fused_lstm_cell_backward_impl(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set_.source_Storage(Tensor(a!) self, Storage source) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set_.source_Storage_storage_offset(Tensor(a!) self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set_.source_Tensor_storage_offset(Tensor(a!) self, Tensor source, int storage_offset, int[] size, int[] stride=[]) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set_.source_Tensor(Tensor(a!) self, Tensor source) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lift(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::is_set_to(Tensor self, Tensor tensor) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_masked_softmax(Tensor self, Tensor mask, int? dim=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_masked_softmax_backward(Tensor grad_output, Tensor output, Tensor mask, int? dim=None) -> (Tensor)   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view(Tensor(a) self, int[] size) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view.dtype(Tensor(a) self, int dtype) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::put(Tensor self, Tensor index, Tensor source, bool accumulate=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_add.out(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source, *, Scalar alpha=1) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_add(Tensor self, int dim, Tensor index, Tensor source, *, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_add.dimname(Tensor self, str dim, Tensor index, Tensor source, *, Scalar alpha=1) -> (Tensor)   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_reduce.out(Tensor self, int dim, Tensor index, Tensor source, str reduce, *, bool include_self=True, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_reduce_(Tensor(a!) self, int dim, Tensor index, Tensor source, str reduce, *, bool include_self=True) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_reduce(Tensor self, int dim, Tensor index, Tensor source, str reduce, *, bool include_self=True) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill_.int_Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill.int_Scalar(Tensor self, int dim, Tensor index, Scalar value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill_.int_Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill.int_Tensor(Tensor self, int dim, Tensor index, Tensor value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill_.Dimname_Scalar(Tensor(a!) self, str dim, Tensor index, Scalar value) -> (Tensor(a!))      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill_.Dimname_Tensor(Tensor(a!) self, str dim, Tensor index, Tensor value) -> (Tensor(a!))      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill.Dimname_Scalar(Tensor self, str dim, Tensor index, Scalar value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill.Dimname_Tensor(Tensor self, str dim, Tensor index, Tensor value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.src_out(Tensor self, int dim, Tensor index, Tensor src, *, Tensor(a!) out) -> (Tensor(a!))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.value_out(Tensor self, int dim, Tensor index, Scalar value, *, Tensor(a!) out) -> (Tensor(a!))[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.reduce(Tensor self, int dim, Tensor index, Tensor src, *, str reduce) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_.reduce(Tensor(a!) self, int dim, Tensor index, Tensor src, *, str reduce) -> (Tensor(a!))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.reduce_out(Tensor self, int dim, Tensor index, Tensor src, *, str reduce, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.value_reduce(Tensor self, int dim, Tensor index, Scalar value, *, str reduce) -> (Tensor)     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_.value_reduce(Tensor(a!) self, int dim, Tensor index, Scalar value, *, str reduce) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.value_reduce_out(Tensor self, int dim, Tensor index, Scalar value, *, str reduce, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.dimname_src(Tensor self, str dim, Tensor index, Tensor src) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter.dimname_value(Tensor self, str dim, Tensor index, Scalar value) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_add.out(Tensor self, int dim, Tensor index, Tensor src, *, Tensor(a!) out) -> (Tensor(a!))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_add.dimname(Tensor self, str dim, Tensor index, Tensor src) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_reduce.two(Tensor self, int dim, Tensor index, Tensor src, str reduce, *, bool include_self=True) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_reduce_.two(Tensor(a!) self, int dim, Tensor index, Tensor src, str reduce, *, bool include_self=True) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::scatter_reduce.two_out(Tensor self, int dim, Tensor index, Tensor src, str reduce, *, bool include_self=True, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_and.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_and.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_and.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_and.Scalar_Tensor(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_and.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_and_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_and_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__and__.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__and__.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_or.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_or.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_or.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_or.Scalar_Tensor(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_or.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_or_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_or_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__or__.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__or__.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_xor.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_xor.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_xor.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_xor.Scalar_Tensor(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_xor.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_xor_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_xor_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__xor__.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__xor__.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__lshift__.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__lshift__.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_left_shift.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_left_shift_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_left_shift.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_left_shift.Tensor_Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_left_shift_.Tensor_Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_left_shift.Tensor_Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_left_shift.Scalar_Tensor(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__rshift__.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__rshift__.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__irshift__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__irshift__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_right_shift.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_right_shift_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_right_shift.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_right_shift.Tensor_Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_right_shift_.Tensor_Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_right_shift.Tensor_Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bitwise_right_shift.Scalar_Tensor(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tril_(Tensor(a!) self, int diagonal=0) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::triu_(Tensor(a!) self, int diagonal=0) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::digamma_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor)       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random_.from(Tensor(a!) self, int from, int? to, *, Generator? generator=None) -> (Tensor(a!))        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random_(Tensor(a!) self, *, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::uniform_(Tensor(a!) self, float from=0., float to=1., *, Generator? generator=None) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cauchy_(Tensor(a!) self, float median=0., float sigma=1., *, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_normal_(Tensor(a!) self, float mean=1., float std=2., *, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exponential_(Tensor(a!) self, float lambd=1., *, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diag(Tensor self, int diagonal=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diag_backward(Tensor grad, int[] input_sizes, int diagonal) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cross(Tensor self, Tensor other, int? dim=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::triu(Tensor self, int diagonal=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tril(Tensor self, int diagonal=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tril_indices(int row, int col, int offset=0, *, int? dtype=4, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::triu_indices(int row, int col, int offset=0, *, int? dtype=4, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trace(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::trace_backward(Tensor grad, int[] sizes) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ne.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ne.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::not_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::not_equal.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::not_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::not_equal.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::not_equal_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::not_equal_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eq.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eq.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ge.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ge.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater_equal.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater_equal.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater_equal_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater_equal_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::le.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::le.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::le_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::le_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less_equal.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less_equal.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less_equal.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less_equal.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less_equal_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less_equal_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gt.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gt.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::greater_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lt.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lt.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::less_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::take(Tensor self, Tensor index) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::take_along_dim.out(Tensor self, Tensor indices, int? dim=None, *, Tensor(a!) out) -> (Tensor(a!))     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::take_along_dim(Tensor self, Tensor indices, int? dim=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_select(Tensor self, int dim, Tensor index) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_select.dimname_out(Tensor self, str dim, Tensor index, *, Tensor(a!) out) -> (Tensor(a!))       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_select.dimname(Tensor self, str dim, Tensor index) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_select_backward(Tensor grad, int[] self_sizes, int dim, Tensor index) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_select(Tensor self, Tensor mask) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_select_backward(Tensor grad, Tensor input, Tensor mask) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nonzero(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nonzero_numpy(Tensor self) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::argwhere(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gather_backward(Tensor grad, Tensor self, int dim, Tensor index, bool sparse_grad) -> (Tensor)        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gather.dimname_out(Tensor self, str dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::gather.dimname(Tensor self, str dim, Tensor index, *, bool sparse_grad=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cross_entropy_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100, float label_smoothing=0.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lstsq.X(Tensor self, Tensor A, *, Tensor(a!) X, Tensor(b!) qr) -> (Tensor(a!) solution, Tensor(b!) QR)[FTXJ LOG] Dispatcher::registerDef, schema = aten::lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::triangular_solve.X(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False, *, Tensor(a!) X, Tensor(b!) M) -> (Tensor(a!) solution, Tensor(b!) cloned_coefficient)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_linalg_check_errors(Tensor info, str api_name, *, bool is_matrix) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_solve_triangular.out(Tensor self, Tensor B, *, bool upper, bool left=True, bool unitriangular=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_solve_triangular(Tensor self, Tensor B, *, bool upper, bool left=True, bool unitriangular=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_vander(Tensor x, *, int? N=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::symeig.e(Tensor self, bool eigenvectors=False, bool upper=True, *, Tensor(a!) e, Tensor(b!) V) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eig.e(Tensor self, bool eigenvectors=False, *, Tensor(a!) e, Tensor(b!) v) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::svd.U(Tensor self, bool some=True, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) V) 
-> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) V)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::swapaxes(Tensor(a) self, int axis0, int axis1) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::swapaxes_(Tensor(a!) self, int axis0, int axis1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::swapdims(Tensor(a) self, int dim0, int dim1) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::swapdims_(Tensor(a!) self, int dim0, int dim1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cholesky(Tensor self, bool upper=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cholesky_inverse(Tensor self, bool upper=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::qr.Q(Tensor self, bool some=True, *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::geqrf.a(Tensor self, *, Tensor(a!) a, Tensor(b!) tau) -> (Tensor(a!) a, Tensor(b!) tau)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::geqrf(Tensor self) -> (Tensor a, Tensor tau)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::orgqr(Tensor self, Tensor input2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> (Tensor)    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor LU, Tensor pivots, Tensor info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> (Tensor(a!))        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lu_unpack(Tensor LU_data, Tensor LU_pivots, bool unpack_data=True, bool unpack_pivots=True) -> (Tensor P, Tensor L, Tensor U)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lu_unpack.out(Tensor LU_data, Tensor LU_pivots, bool unpack_data=True, bool unpack_pivots=True, *, Tensor(a!) P, Tensor(b!) L, Tensor(c!) U) -> (Tensor(a!) P, Tensor(b!) L, Tensor(c!) U)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lgamma_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lgamma(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::digamma.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::digamma(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::polygamma(int n, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::polygamma_(Tensor(a!) self, int n) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erfinv(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erfinv_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::i0(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::i0_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::i0.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sign(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sign_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sign.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::signbit(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::signbit.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::dist(Tensor self, Tensor other, Scalar p=2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atan2_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::atan2(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctan2(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::arctan2_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histogram.bins_tensor_out(Tensor self, Tensor bins, *, Tensor? weight=None, bool density=False, Tensor(a!) hist, Tensor(b!) bin_edges) -> (Tensor(a!) hist, Tensor(b!) bin_edges)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histogram.bins_tensor(Tensor self, Tensor bins, *, Tensor? weight=None, bool density=False) -> (Tensor hist, Tensor bin_edges)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histogram.bin_ct_out(Tensor self, int bins=100, *, float[]? range=None, Tensor? weight=None, bool density=False, Tensor(a!) hist, Tensor(b!) bin_edges) -> (Tensor(a!) hist, Tensor(b!) bin_edges)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histogram.bin_ct(Tensor self, int bins=100, *, float[]? range=None, Tensor? weight=None, bool density=False) -> (Tensor hist, Tensor bin_edges)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_histogramdd_bin_edges(Tensor self, int[] bins, *, float[]? range=None, Tensor? weight=None, bool density=False) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_histogramdd_from_bin_cts(Tensor self, int[] bins, *, float[]? range=None, Tensor? weight=None, bool density=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_histogramdd_from_bin_tensors(Tensor self, Tensor[] bins, *, Tensor? weight=None, bool density=False) 
-> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histogramdd(Tensor self, int[] bins, float[]? range=None, Tensor? weight=None, bool density=False) -> 
(Tensor hist, Tensor[] bin_edges)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histogramdd.int_bins(Tensor self, int bins, float[]? range=None, Tensor? weight=None, bool density=False) -> (Tensor hist, Tensor[] bin_edges)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::histogramdd.TensorList_bins(Tensor self, Tensor[] bins, float[]? range=None, Tensor? weight=None, bool density=False) -> (Tensor hist, Tensor[] bin_edges)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmod.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmod_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmod.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmod_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hypot.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hypot(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hypot_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::igamma.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::igamma(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::igamma_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::igammac.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::igammac(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::igammac_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nextafter.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nextafter(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nextafter_(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::remainder.Scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::remainder_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::remainder.Tensor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::remainder_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::remainder.Scalar_Tensor(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::min(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmin(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmin.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmax(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fmax.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::maximum(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::maximum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max.other(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::minimum(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::minimum.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::min.other(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantile(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, str interpolation="linear") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantile.out(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, str interpolation="linear", 
Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantile.scalar(Tensor self, float q, int? dim=None, bool keepdim=False, *, str interpolation="linear") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::quantile.scalar_out(Tensor self, float q, int? dim=None, bool keepdim=False, *, str interpolation="linear", Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanquantile(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, str interpolation="linear") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanquantile.out(Tensor self, Tensor q, int? dim=None, bool keepdim=False, *, str interpolation="linear", Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanquantile.scalar(Tensor self, float q, int? dim=None, bool keepdim=False, *, str interpolation="linear") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nanquantile.scalar_out(Tensor self, float q, int? dim=None, bool keepdim=False, *, str interpolation="linear", Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sort.values(Tensor self, int dim=-1, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) 
-> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sort.values_stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sort.stable(Tensor self, *, bool? stable, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sort.dimname_values(Tensor self, str dim, bool descending=False, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sort.dimname_values_stable(Tensor self, *, bool? stable, str dim, bool descending=False, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sort.dimname(Tensor self, str dim, bool descending=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sort.dimname_stable(Tensor self, *, bool? stable, str dim, bool descending=False) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::msort.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::msort(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::argsort(Tensor self, int dim=-1, bool descending=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::argsort.dimname(Tensor self, str dim, bool descending=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::topk.values(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True, *, Tensor(a!) values, Tensor(b!) indices) -> (Tensor(a!) values, Tensor(b!) indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::all(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::all.all_out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::any(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::any.all_out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unfold(Tensor(a) self, int dimension, int size, int step) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unfold_backward(Tensor grad_in, int[] input_sizes, int dim, int size, int step) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::equal(Tensor self, Tensor other) -> (bool)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pow.Scalar(Scalar self, Tensor exponent) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pow_.Scalar(Tensor(a!) self, Scalar exponent) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pow_.Tensor(Tensor(a!) self, Tensor exponent) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::float_power.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> (Tensor(a!))        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::float_power.Tensor_Tensor(Tensor self, Tensor exponent) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::float_power.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::float_power.Scalar(Scalar self, Tensor exponent) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::float_power.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> (Tensor(a!))        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::float_power.Tensor_Scalar(Tensor self, Scalar exponent) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::float_power_.Scalar(Tensor(a!) self, Scalar exponent) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::float_power_.Tensor(Tensor(a!) self, Tensor exponent) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal_(Tensor(a!) self, float mean=0., float std=1., *, Generator? generator=None) -> (Tensor(a!))   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.Tensor_float_out(Tensor mean, float std=1., *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.Tensor_float(Tensor mean, float std=1., *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::alias(Tensor(a) self) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_amp_foreach_non_finite_check_and_unscale_(Tensor[] self, Tensor(b!) found_inf, Tensor inv_scale) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_amp_update_scale_(Tensor(a!) self, Tensor(b!) growth_tracker, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.Scalar(Tensor[] tensors, Scalar scalar) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add_.Scalar(Tensor[] self, Scalar scalar) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.Scalar(Tensor[] tensors, Scalar scalar) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub_.Scalar(Tensor[] self, Scalar scalar) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.Scalar(Tensor[] tensors, Scalar scalar) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul_.Scalar(Tensor[] self, Scalar scalar) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.Scalar(Tensor[] tensors, Scalar scalar) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div_.Scalar(Tensor[] self, Scalar scalar) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.List(Tensor[] tensors1, Tensor[] tensors2, *, Scalar alpha=1) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add_.List(Tensor[] self, Tensor[] other, *, Scalar alpha=1) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.List(Tensor[] tensors1, Tensor[] tensors2, *, Scalar alpha=1) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub_.List(Tensor[] self, Tensor[] other, *, Scalar alpha=1) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.List(Tensor[] tensors1, Tensor[] tensors2) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul_.List(Tensor[] self, Tensor[] other) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.List(Tensor[] tensors1, Tensor[] tensors2) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div_.List(Tensor[] self, Tensor[] other) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.ScalarList(Tensor[] tensors, Scalar[] scalars) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add_.ScalarList(Tensor[] self, Scalar[] scalars) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.ScalarList(Tensor[] tensors, Scalar[] scalars) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub_.ScalarList(Tensor[] self, Scalar[] scalars) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.ScalarList(Tensor[] tensors, Scalar[] scalars) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div_.ScalarList(Tensor[] self, Scalar[] scalars) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.ScalarList(Tensor[] tensors, Scalar[] scalars) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul_.ScalarList(Tensor[] self, Scalar[] scalars) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_exp(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_zero_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_exp_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sqrt(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sqrt_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_abs(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_abs_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_acos(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_acos_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_asin(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_asin_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_atan(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_atan_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_ceil(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_ceil_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_cos(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_cos_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_cosh(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_cosh_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_erf(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_erf_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_erfc(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_erfc_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_expm1(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_expm1_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_floor(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_floor_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log10(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log10_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log1p(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log1p_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log2(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log2_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_neg(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_neg_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_tan(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_tan_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_tanh(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_tanh_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sin(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sin_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sinh(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sinh_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_round(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_round_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_lgamma(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_lgamma_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_frac(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_frac_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_reciprocal(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_reciprocal_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sigmoid(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sigmoid_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_trunc(Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_trunc_(Tensor[] self) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcdiv_.Scalar(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcmul_.Scalar(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> ()     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcdiv_.ScalarList(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcmul_.ScalarList(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcdiv.Scalar(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcmul.Scalar(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcdiv.ScalarList(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcmul.ScalarList(Tensor[] input, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_maximum.List(Tensor[] tensors1, Tensor[] tensors2) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_minimum.List(Tensor[] tensors1, Tensor[] tensors2) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_norm.Scalar(Tensor[] tensors, Scalar ord=2) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bucketize.Tensor(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bucketize.Tensor_out(Tensor self, Tensor boundaries, *, bool out_int32=False, bool right=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bucketize.Scalar(Scalar self, Tensor boundaries, *, bool out_int32=False, bool right=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::searchsorted.Tensor(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_torch_cuda_cu_linker_symbol_op(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::searchsorted.Tensor_out(Tensor sorted_sequence, Tensor self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::searchsorted.Scalar(Tensor sorted_sequence, Scalar self, *, bool out_int32=False, bool right=False, str? side=None, Tensor? sorter=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_convert_indices_from_coo_to_csr(Tensor self, int size, *, bool out_int32=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_convert_indices_from_coo_to_csr.out(Tensor self, int size, *, bool out_int32=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_convert_indices_from_csr_to_coo(Tensor crow_indices, Tensor col_indices, *, bool out_int32=False, bool transpose=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_convert_indices_from_csr_to_coo.out(Tensor crow_indices, Tensor col_indices, *, bool out_int32=False, bool transpose=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mse_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mse_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::l1_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::l1_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=1, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multilabel_margin_loss_forward.output(Tensor self, Tensor target, int reduction, *, Tensor(a!) output, Tensor(b!) is_target) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor 
is_target) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100, 
*, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss_nd(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss2d_forward.output(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, *, Tensor(a!) output, Tensor(b!) total_weight) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=1, float beta=1., *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=1, float beta=1.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float beta) -> 
(Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::huber_loss.out(Tensor self, Tensor target, int reduction=1, float delta=1., *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::huber_loss(Tensor self, Tensor target, int reduction=1, float delta=1.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::huber_loss_backward.out(Tensor grad_output, Tensor self, Tensor target, int reduction, float delta, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::huber_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, float delta) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::soft_margin_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor)  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, bool is_result, Tensor self_or_result) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::glu(Tensor self, int dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::glu_backward(Tensor grad_output, Tensor self, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::glu_jvp(Tensor glu, Tensor x, Tensor dx, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::glu_backward_jvp(Tensor grad_x, Tensor grad_glu, Tensor x, Tensor dgrad_glu, Tensor dx, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardsigmoid.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardsigmoid(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardsigmoid_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardsigmoid_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardsigmoid_backward(Tensor grad_output, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> (Tensor(a!))     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> (Tensor)        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardswish.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardswish(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardswish_(Tensor(a!) self) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::hardswish_backward(Tensor grad_output, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::leaky_relu(Tensor self, Scalar negative_slope=0.01) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope, bool self_is_result) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_sigmoid(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_sigmoid_forward.output(Tensor self, *, Tensor(a!) output, Tensor(b!) buffer) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, 
bool training=False, Generator? generator=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, bool self_is_result) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> (Tensor(a!))      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softshrink(Tensor self, Scalar lambd=0.5) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mkldnn_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_avg_pool3d(Tensor self, int[3] output_size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_adaptive_avg_pool3d(Tensor self, int[3] output_size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> 
(Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fractional_max_pool2d.output(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] 
output_size, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fractional_max_pool3d.output(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples, *, Tensor(a!) output, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] 
output_size, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool2d_with_indices.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], 
int[2] dilation=[1, 1], bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool3d_with_indices.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False, *, Tensor(a!) out, Tensor(b!) indices) -> (Tensor(a!), Tensor(b!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad1d(Tensor self, int[2] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad2d(Tensor self, int[4] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad3d(Tensor self, int[6] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::reflection_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad1d(Tensor self, int[2] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad2d(Tensor self, int[4] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad3d(Tensor self, int[6] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_pad_circular(Tensor self, int[] pad) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_pad_enum(Tensor self, int[] pad, int mode, float? value=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pad(Tensor self, int[] pad, str mode="constant", float? value=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_linear1d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_linear1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bilinear2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) 
-> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bilinear2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bilinear2d_aa.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bilinear2d_aa_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_trilinear3d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_trilinear3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bicubic2d.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bicubic2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bicubic2d_aa.vec(Tensor input, int[]? output_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bicubic2d_aa_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, bool align_corners, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest1d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact1d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact1d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest2d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact2d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact2d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest3d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact3d.vec(Tensor input, int[]? output_size, float[]? scale_factors) -> (Tensor)   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact3d_backward.vec(Tensor grad_output, int[]? output_size, int[] input_size, float[]? scale_factors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, float? scales=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_linear1d(Tensor self, int[1] output_size, bool align_corners, float? scales=None) -> (Tensor)[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool 
align_corners, float? scales=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, float? scales=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? 
scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bilinear2d_aa.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bilinear2d_aa(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bilinear2d_aa_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bilinear2d_aa_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bicubic2d_aa.out(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, 
float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bicubic2d_aa(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bicubic2d_aa_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, 
bool align_corners, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_bicubic2d_aa_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact1d.out(Tensor self, int[1] output_size, float? scales=None, *, Tensor(a!) out) 
-> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest1d(Tensor self, int[1] output_size, float? scales=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact1d(Tensor self, int[1] output_size, float? scales=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, float? scales=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact2d.out(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact2d(Tensor self, int[2] output_size, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact3d.out(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact3d(Tensor self, int[3] output_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_upsample_nearest_exact3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, float? scales_d=None, float? scales_h=None, float? scales_w=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sigmoid_backward(Tensor grad_output, Tensor output) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logit_backward.grad_input(Tensor grad_output, Tensor self, float? eps=None, *, Tensor(a!) grad_input) 
-> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::logit_backward(Tensor grad_output, Tensor self, float? eps=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::tanh_backward(Tensor grad_output, Tensor output) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int[2] dilation=[1, 1], *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int[2] dilation=[1, 1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int[3] dilation=[1, 1, 1], *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int[3] dilation=[1, 1, 1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_slow_conv2d_forward.output(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, *, Tensor(a!) output) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_slow_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_slow_conv2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, *, Tensor(a!) grad_input, Tensor(b!) grad_weight, Tensor(c!) grad_bias) -> (Tensor(a!), Tensor(b!), Tensor(c!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_slow_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, 
int[2] stride, int[2] padding, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] 
padding, int[2] dilation) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::conv_depthwise3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, int[3] dilation) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv3d_forward.output(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding, *, Tensor(a!) output) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::column_stack(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::column_stack.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor)   
[FTXJ LOG] Dispatcher::registerDef, schema = aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isfinite(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isinf(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::record_stream(Tensor(a!) self, Stream s) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isposinf(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isposinf.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isneginf(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::isneginf.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_add_batch_dim(Tensor self, int batch_dim, int level) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_remove_batch_dim(Tensor self, int level, int batch_size, int out_dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_entr(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_entr.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_ndtri(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_ndtri.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_log_ndtr(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_log_ndtr.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_expm1(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_expm1.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_exp2(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_exp2.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_psi(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_psi.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_digamma(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_digamma.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_gammaln(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_gammaln.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_erf(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_erf.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_erfc(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_erfc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_erfcx(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_erfcx.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_erfinv(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_erfinv.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_ndtr(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_ndtr.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlog1py(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlog1py.self_scalar(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlog1py.other_scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlog1py.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlog1py.self_scalar_out(Scalar self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlog1py.other_scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlogy(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlogy.self_scalar(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlogy.other_scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlogy.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlogy.self_scalar_out(Scalar self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_xlogy.other_scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_zeta(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_zeta.self_scalar(Scalar self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_zeta.other_scalar(Tensor self, Scalar other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_zeta.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_zeta.self_scalar_out(Scalar self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_zeta.other_scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_i0(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_i0.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_i0e(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_i0e.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_i1(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_i1.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_i1e(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_i1e.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_logit(Tensor self, float? eps=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_logit.out(Tensor self, float? eps=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_polygamma(int n, Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_expit(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_expit.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_sinc(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_sinc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_round(Tensor self, *, int decimals=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_round.out(Tensor self, *, int decimals=0, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_log1p(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_log1p.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_log_softmax(Tensor self, int dim, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_gammainc.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_gammainc(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_gammaincc.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_gammaincc(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_multigammaln(Tensor self, int p) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_multigammaln.out(Tensor self, int p, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::special_softmax(Tensor self, int dim, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))  
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ifft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ifft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_rfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_rfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_irfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_irfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_hfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_hfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ihfft(Tensor self, int? n=None, int dim=-1, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ihfft.out(Tensor self, int? n=None, int dim=-1, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fft2(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ifft2(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ifft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None, *, Tensor(a!) out) -> 
(Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_rfft2(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_rfft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None, *, Tensor(a!) out) -> 
(Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_irfft2(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_irfft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_hfft2(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_hfft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None, *, Tensor(a!) out) -> 
(Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ihfft2(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ihfft2.out(Tensor self, int[1]? s=None, int[1] dim=[-2, -1], str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ifftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ifftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_rfftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_rfftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_irfftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_irfftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_hfftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_hfftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ihfftn(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ihfftn.out(Tensor self, int[1]? s=None, int[1]? dim=None, str? norm=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fftfreq(int n, float d=1., *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fftfreq.out(int n, float d=1., *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_rfftfreq(int n, float d=1., *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_rfftfreq.out(int n, float d=1., *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_fftshift(Tensor self, int[1]? dim=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fft_ifftshift(Tensor self, int[1]? dim=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cholesky_ex(Tensor self, *, bool upper=False, bool check_errors=False) -> (Tensor L, Tensor info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cholesky_ex.L(Tensor self, *, bool upper=False, bool check_errors=False, Tensor(a!) L, Tensor(b!) info) -> (Tensor(a!) L, Tensor(b!) info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cholesky(Tensor self, *, bool upper=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cholesky.out(Tensor self, *, bool upper=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cross(Tensor self, Tensor other, *, int dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cross.out(Tensor self, Tensor other, *, int dim=-1, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_lu_factor(Tensor A, *, bool pivot=True) -> (Tensor LU, Tensor pivots)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_lu_factor.out(Tensor A, *, bool pivot=True, Tensor(a!) LU, Tensor(b!) pivots) -> (Tensor(a!) LU, Tensor(b!) pivots)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_lu_factor_ex(Tensor A, *, bool pivot=True, bool check_errors=False) -> (Tensor LU, Tensor pivots, Tensor info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_lu_factor_ex.out(Tensor A, *, bool pivot=True, bool check_errors=False, Tensor(a!) LU, Tensor(b!) pivots, Tensor(c!) info) -> (Tensor(a!) LU, Tensor(b!) pivots, Tensor(c!) info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_lu(Tensor A, *, bool pivot=True) -> (Tensor P, Tensor L, Tensor U)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_lu.out(Tensor A, *, bool pivot=True, Tensor(a!) P, Tensor(b!) L, Tensor(c!) U) -> (Tensor(a!) P, Tensor(b!) L, Tensor(c!) U)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_det(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_det.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::det(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_det_lu_based_helper(Tensor self) -> (Tensor det, Tensor lu, Tensor pivs)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_det_lu_based_helper_backward_helper(Tensor det_grad, Tensor det, Tensor self, Tensor lu, Tensor pivs) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_ldl_factor_ex(Tensor self, *, bool hermitian=False, bool check_errors=False) -> (Tensor LD, Tensor pivots, Tensor info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_ldl_factor_ex.out(Tensor self, *, bool hermitian=False, bool check_errors=False, Tensor(a!) LD, Tensor(b!) pivots, Tensor(c!) info) -> (Tensor(a!) LD, Tensor(b!) pivots, Tensor(c!) info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_ldl_factor(Tensor self, *, bool hermitian=False) -> (Tensor LD, Tensor pivots)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_ldl_factor.out(Tensor self, *, bool hermitian=False, Tensor(a!) LD, Tensor(b!) pivots) -> (Tensor(a!) LD, Tensor(b!) pivots)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_ldl_solve(Tensor LD, Tensor pivots, Tensor B, *, bool hermitian=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_ldl_solve.out(Tensor LD, Tensor pivots, Tensor B, *, bool hermitian=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_lstsq(Tensor self, Tensor b, float? rcond=None, *, str? driver=None) -> (Tensor solution, Tensor residuals, Tensor rank, Tensor singular_values)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_lstsq.out(Tensor self, Tensor b, float? rcond=None, *, str? driver=None, Tensor(a!) solution, Tensor(b!) residuals, Tensor(c!) rank, Tensor(d!) singular_values) -> (Tensor(a!) solution, Tensor(b!) residuals, Tensor(c!) rank, Tensor(d!) singular_values)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matmul(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_exp(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_slogdet.out(Tensor self, *, Tensor(a!) sign, Tensor(b!) logabsdet) -> (Tensor(a!) sign, Tensor(b!) logabsdet)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_eig(Tensor self) -> (Tensor eigenvalues, Tensor eigenvectors)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_eig.out(Tensor self, *, Tensor(a!) eigenvalues, Tensor(b!) eigenvectors) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_eigvals(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_eigvals.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_eigh(Tensor self, str UPLO="L") -> (Tensor eigenvalues, Tensor eigenvectors)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_eigh.eigvals(Tensor self, str UPLO="L", *, Tensor(a!) eigvals, Tensor(b!) eigvecs) -> (Tensor(a!) eigenvalues, Tensor(b!) eigenvectors)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_eigvalsh(Tensor self, str UPLO="L") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_eigvalsh.out(Tensor self, str UPLO="L", *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_householder_product(Tensor input, Tensor tau) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_householder_product.out(Tensor input, Tensor tau, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_linalg_inv_out_helper_(Tensor(a!) self, Tensor(b!) infos_lu, Tensor(c!) infos_getri) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_inv_ex(Tensor self, *, bool check_errors=False) -> (Tensor inverse, Tensor info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_inv_ex.inverse(Tensor self, *, bool check_errors=False, Tensor(a!) inverse, Tensor(b!) info) -> (Tensor(a!) inverse, Tensor(b!) info)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_inv(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_inv.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::inner(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::inner.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::outer(Tensor self, Tensor vec2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::outer.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ger(Tensor self, Tensor vec2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_norm(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_norm.ord_str(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_norm.out(Tensor self, Scalar? ord=None, int[1]? dim=None, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_norm.ord_str_out(Tensor self, str ord, int[1]? dim=None, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_vector_norm(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_vector_norm.out(Tensor self, Scalar ord=2, int[1]? dim=None, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_norm(Tensor self, Scalar ord, int[] dim=[-2, -1], bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_norm.out(Tensor self, Scalar ord, int[] dim=[-2, -1], bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_norm.str_ord(Tensor self, str ord="fro", int[] dim=[-2, -1], bool keepdim=False, *, int? dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_norm.str_ord_out(Tensor self, str ord="fro", int[] dim=[-2, -1], bool keepdim=False, *, 
int? dtype=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_linalg_svd(Tensor A, bool full_matrices=False, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor Vh)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_linalg_svd.U(Tensor A, bool full_matrices=False, bool compute_uv=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_svd(Tensor A, bool full_matrices=True) -> (Tensor U, Tensor S, Tensor Vh)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_svd.U(Tensor A, bool full_matrices=True, *, Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh) -> (Tensor(a!) U, Tensor(b!) S, Tensor(c!) Vh)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_svdvals(Tensor A) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_svdvals.out(Tensor A, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cond(Tensor self, Scalar? p=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cond.out(Tensor self, Scalar? p=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cond.p_str(Tensor self, str p) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_cond.p_str_out(Tensor self, str p, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_pinv.atol_rtol_tensor(Tensor self, *, Tensor? atol=None, Tensor? rtol=None, bool hermitian=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_pinv.atol_rtol_tensor_out(Tensor self, *, Tensor? atol=None, Tensor? rtol=None, bool hermitian=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_pinv.atol_rtol_float(Tensor self, *, float? atol=None, float? rtol=None, bool hermitian=False) 
-> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_pinv.atol_rtol_float_out(Tensor self, *, float? atol=None, float? rtol=None, bool hermitian=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_pinv(Tensor self, float rcond, bool hermitian=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_pinv.rcond_tensor(Tensor self, Tensor rcond, bool hermitian=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_pinv.out(Tensor self, float rcond, bool hermitian=False, *, Tensor(a!) out) -> (Tensor(a!))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_pinv.out_rcond_tensor(Tensor self, Tensor rcond, bool hermitian=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_solve(Tensor input, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_solve.out(Tensor input, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_tensorinv(Tensor self, int ind=2) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_tensorinv.out(Tensor self, int ind=2, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_tensorsolve(Tensor self, Tensor other, int[]? dims=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_tensorsolve.out(Tensor self, Tensor other, int[]? dims=None, *, Tensor(a!) out) -> (Tensor(a!))[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_qr(Tensor A, str mode="reduced") -> (Tensor Q, Tensor R)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_qr.out(Tensor A, str mode="reduced", *, Tensor(a!) Q, Tensor(b!) R) -> (Tensor(a!) Q, Tensor(b!) R)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_linalg_qr_helper(Tensor self, str mode) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_power(Tensor self, int n) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_power.out(Tensor self, int n, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_rank.atol_rtol_tensor(Tensor input, *, Tensor? atol=None, Tensor? rtol=None, bool hermitian=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_rank.atol_rtol_tensor_out(Tensor input, *, Tensor? atol=None, Tensor? rtol=None, bool hermitian=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_rank.atol_rtol_float(Tensor self, *, float? atol=None, float? rtol=None, bool hermitian=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_rank.atol_rtol_float_out(Tensor self, *, float? atol=None, float? rtol=None, bool hermitian=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_rank(Tensor self, float tol, bool hermitian=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_rank.out(Tensor self, float tol, bool hermitian=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_rank.tol_tensor(Tensor input, Tensor tol, bool hermitian=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_matrix_rank.out_tol_tensor(Tensor input, Tensor tol, bool hermitian=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_multi_dot(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::linalg_multi_dot.out(Tensor[] tensors, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_test_serialization_subcmul(Tensor self, Tensor other, Scalar alpha=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_test_optional_intlist(Tensor values, int[]? addends) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_test_optional_filled_intlist(Tensor values, int[2]? addends) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_test_optional_floatlist(Tensor values, float[]? addends) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_test_string_default(Tensor dummy, str a="\"\'\\", str b="\"\'\\") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_test_ambiguous_defaults.a(Tensor dummy, int a=1, int b=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_test_ambiguous_defaults.b(Tensor dummy, int a=2, str b="2") -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_test_warn_in_autograd(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::segment_reduce(Tensor data, str reduce, *, Tensor? lengths=None, Tensor? indices=None, int axis=0, bool unsafe=False, Scalar? initial=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_segment_reduce_backward(Tensor grad, Tensor output, Tensor data, str reduce, *, Tensor? lengths=None, int axis=0) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::pad_sequence(Tensor[] sequences, bool batch_first=False, float padding_value=0.) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::flatten_dense_tensors(Tensor[] tensors) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unflatten_dense_tensors(Tensor flat, Tensor[] tensors) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::nested_tensor(Tensor[] list, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fw_primal_copy(Tensor self, int level) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_make_dual_copy(Tensor primal, Tensor tangent, int level) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_as_real_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_as_complex_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_conj_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_neg_view_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::as_strided_copy(Tensor self, int[] size, int[] stride, int? storage_offset=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_broadcast_to_copy(Tensor self, int[] size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diagonal_copy(Tensor self, int offset=0, int dim1=0, int dim2=1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expand_copy(Tensor self, int[] size, *, bool implicit=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expand_copy.SymInt(Tensor self, SymInt[] size, *, bool implicit=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::permute_copy(Tensor self, int[] dims) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_reshape_alias_copy(Tensor self, int[] size, int[] stride) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::select_copy.int(Tensor self, int dim, int index) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::detach_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slice_copy.Tensor(Tensor self, int dim=0, int? start=None, int? end=None, int step=1) -> (Tensor)     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::split_copy.Tensor(Tensor self, int split_size, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::split_with_sizes_copy(Tensor self, int[] split_sizes, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze_copy.dim(Tensor self, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::t_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::transpose_copy.int(Tensor self, int dim0, int dim1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unsqueeze_copy(Tensor self, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_indices_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_values_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::indices_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::values_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::crow_indices_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::col_indices_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::ccol_indices_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::row_indices_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unbind_copy.int(Tensor self, int dim=0) -> (Tensor[])
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_copy(Tensor self, int[] size) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_copy.dtype(Tensor self, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unfold_copy(Tensor self, int dimension, int size, int step) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::alias_copy(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fw_primal_copy.out(Tensor self, int level, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_make_dual_copy.out(Tensor primal, Tensor tangent, int level, *, Tensor(a!) out) -> (Tensor(a!))      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_as_real_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_as_complex_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_conj_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_neg_view_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::as_strided_copy.out(Tensor self, int[] size, int[] stride, int? storage_offset=None, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_sparse_broadcast_to_copy.out(Tensor self, int[] size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::diagonal_copy.out(Tensor self, int offset=0, int dim1=0, int dim2=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expand_copy.SymInt_out(Tensor self, SymInt[] size, *, bool implicit=False, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::expand_copy.out(Tensor self, int[] size, *, bool implicit=False, Tensor(a!) out) -> (Tensor(a!))      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::permute_copy.out(Tensor self, int[] dims, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_reshape_alias_copy.out(Tensor self, int[] size, int[] stride, *, Tensor(a!) out) -> (Tensor(a!))     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::select_copy.int_out(Tensor self, int dim, int index, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::detach_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::slice_copy.Tensor_out(Tensor self, int dim=0, int? start=None, int? end=None, int step=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::split_copy.Tensor_out(Tensor self, int split_size, int dim=0, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::split_with_sizes_copy.out(Tensor self, int[] split_sizes, int dim=0, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::squeeze_copy.dim_out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::t_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::transpose_copy.int_out(Tensor self, int dim0, int dim1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unsqueeze_copy.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_indices_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_values_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::indices_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::values_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::crow_indices_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::col_indices_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unbind_copy.int_out(Tensor self, int dim=0, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_copy.out(Tensor self, int[] size, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::view_copy.dtype_out(Tensor self, int dtype, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::unfold_copy.out(Tensor self, int dimension, int size, int step, *, Tensor(a!) out) -> (Tensor(a!))    
[FTXJ LOG] Dispatcher::registerDef, schema = aten::alias_copy.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::to_padded_tensor(Tensor self, float padding, int[]? output_size=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_nested_tensor_layer_norm(Tensor self, Tensor? weight, Tensor? bias, float eps) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_transformer_encoder_layer_fwd(Tensor src, int embed_dim, int num_heads, Tensor qkv_weight, Tensor qkv_bias, Tensor proj_weight, Tensor proj_bias, bool use_gelu, bool norm_first, float eps, Tensor norm_weight_1, Tensor norm_bias_1, Tensor norm_weight_2, Tensor norm_bias_2, Tensor ffn_weight_1, Tensor ffn_bias_1, Tensor ffn_weight_2, Tensor ffn_bias_2, Tensor? mask=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_native_multi_head_attention(Tensor query, Tensor key, Tensor value, int embed_dim, int num_head, Tensor qkv_weight, Tensor qkv_bias, Tensor proj_weight, Tensor proj_bias, Tensor? mask=None, bool need_weights=True, bool average_attn_weights=True) -> (Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_add_relu.Scalar_out(Tensor self, Scalar other, Scalar alpha=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::add.Scalar_out(Tensor self, Scalar other, Scalar alpha=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bernoulli.Tensor_out(Tensor self, Tensor p, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bernoulli.Tensor_functional(Tensor self, Tensor p, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::bernoulli.float_out(Tensor self, float p=0.5, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copy.out(Tensor self, Tensor src, bool non_blocking=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::div.Scalar_mode_out(Tensor self, Scalar other, *, str? rounding_mode, Tensor(a!) out) -> (Tensor(a!)) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding_renorm.out(Tensor self, Tensor indices, float max_norm, float norm_type, *, Tensor(a!) out) 
-> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::embedding_renorm.functional(Tensor self, Tensor indices, float max_norm, float norm_type) -> (Tensor) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize.out(Tensor self, int[] size, *, int? memory_format=None, Tensor(a!) out) -> (Tensor(a!))       
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize.functional(Tensor self, int[] size, *, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_resize_output.out(Tensor self, int[] size, Device device, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_resize_output.functional(Tensor self, int[] size, Device device) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fill.Scalar_out(Tensor self, Scalar value, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::fill.Tensor_out(Tensor self, Tensor value, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_put.out(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_index_put_impl.out(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_index_put_impl.functional(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False, bool 
unsafe=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::mul.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::relu.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::celu.out(Tensor self, Scalar alpha=1., *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_mkldnn_transpose.out(Tensor self, int dim0, int dim1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize_as.out(Tensor self, Tensor the_template, *, int? memory_format=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize_as.functional(Tensor self, Tensor the_template, *, int? memory_format=None) -> (Tensor)        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize_as_sparse.out(Tensor self, Tensor the_template, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::resize_as_sparse.functional(Tensor self, Tensor the_template) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::zero.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::zero.functional(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sub.Scalar_out(Tensor self, Scalar other, Scalar alpha=1, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_resize.out(Tensor self, int[] size, int sparse_dim, int dense_dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_resize.functional(Tensor self, int[] size, int sparse_dim, int dense_dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_resize_and_clear.out(Tensor self, int[] size, int sparse_dim, int dense_dim, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::sparse_resize_and_clear.functional(Tensor self, int[] size, int sparse_dim, int dense_dim) -> (Tensor)[FTXJ LOG] Dispatcher::registerDef, schema = aten::_coalesced.out(Tensor self, bool coalesced, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_coalesced.functional(Tensor self, bool coalesced) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copy_sparse_to_sparse.out(Tensor self, Tensor src, bool non_blocking=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::copy_sparse_to_sparse.functional(Tensor self, Tensor src, bool non_blocking=False) -> (Tensor)        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fused_moving_avg_obs_fq_helper.out(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor(a!) 
running_min, Tensor(b!) running_max, Tensor(c!) scale, Tensor(d!) zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False, *, Tensor(e!) out0, Tensor(f!) out1) -> (Tensor(e!), Tensor(f!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_fused_moving_avg_obs_fq_helper.functional(Tensor self, Tensor observer_on, Tensor fake_quant_on, Tensor running_min, Tensor running_max, Tensor scale, Tensor zero_point, float averaging_const, int quant_min, int quant_max, int ch_axis, bool per_row_fake_quant=False, bool symmetric_quant=False) -> (Tensor output, Tensor mask, Tensor running_min_out, Tensor running_max_out, Tensor scale_out, Tensor zero_point_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set.source_Storage_out(Tensor self, Storage source, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set.source_Storage_functional(Tensor self, Storage source) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set.source_Storage_storage_offset_out(Tensor self, Storage source, int storage_offset, int[] size, int[] stride=[], *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set.source_Storage_storage_offset_functional(Tensor self, Storage source, int storage_offset, int[] size, int[] stride=[]) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set.source_Tensor_out(Tensor self, Tensor source, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set.source_Tensor_functional(Tensor self, Tensor source) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::set.functional(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_fill.Scalar_out(Tensor self, Tensor mask, Scalar value, *, Tensor(a!) out) -> (Tensor(a!))     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_fill.Tensor_out(Tensor self, Tensor mask, Tensor value, *, Tensor(a!) out) -> (Tensor(a!))     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::masked_scatter.out(Tensor self, Tensor mask, Tensor source, *, Tensor(a!) out) -> (Tensor(a!))        
[FTXJ LOG] Dispatcher::registerDef, schema = aten::put.out(Tensor self, Tensor index, Tensor source, bool accumulate=False, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill.int_Scalar_out(Tensor self, int dim, Tensor index, Scalar value, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::index_fill.int_Tensor_out(Tensor self, int dim, Tensor index, Tensor value, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__lshift__.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__lshift__.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__rshift__.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::__rshift__.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random.from_out(Tensor self, int from, int? to, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random.from_functional(Tensor self, int from, int? to, *, Generator? generator=None) -> (Tensor)      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random.to_out(Tensor self, int to, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))      
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random.to_functional(Tensor self, int to, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::random.functional(Tensor self, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::uniform.out(Tensor self, float from=0., float to=1., *, Generator? generator=None, Tensor(a!) out) -> 
(Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::uniform.functional(Tensor self, float from=0., float to=1., *, Generator? generator=None) -> (Tensor) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cauchy.out(Tensor self, float median=0., float sigma=1., *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::cauchy.functional(Tensor self, float median=0., float sigma=1., *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_normal.out(Tensor self, float mean=1., float std=2., *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::log_normal.functional(Tensor self, float mean=1., float std=2., *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exponential.out(Tensor self, float lambd=1., *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::exponential.functional(Tensor self, float lambd=1., *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::geometric.out(Tensor self, float p, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!))     
[FTXJ LOG] Dispatcher::registerDef, schema = aten::geometric.functional(Tensor self, float p, *, Generator? generator=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.out(Tensor self, float mean=0., float std=1., *, Generator? generator=None, Tensor(a!) out) -> 
(Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::normal.functional(Tensor self, float mean=0., float std=1., *, Generator? generator=None) -> (Tensor) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_amp_foreach_non_finite_check_and_unscale.out(Tensor[] self, Tensor(b!) found_inf, Tensor inv_scale, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_amp_foreach_non_finite_check_and_unscale.functional(Tensor[] self, Tensor found_inf, Tensor inv_scale) -> (Tensor[] self_out, Tensor found_inf_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_amp_update_scale.out(Tensor self, Tensor(b!) growth_tracker, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_amp_update_scale.functional(Tensor self, Tensor growth_tracker, Tensor found_inf, float scale_growth_factor, float scale_backoff_factor, int growth_interval) -> (Tensor, Tensor growth_tracker_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.Scalar_out(Tensor[] self, Scalar scalar, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.Scalar_functional(Tensor[] self, Scalar scalar) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.Scalar_out(Tensor[] self, Scalar scalar, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.Scalar_functional(Tensor[] self, Scalar scalar) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.Scalar_out(Tensor[] self, Scalar scalar, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.Scalar_functional(Tensor[] self, Scalar scalar) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.Scalar_out(Tensor[] self, Scalar scalar, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.Scalar_functional(Tensor[] self, Scalar scalar) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.List_out(Tensor[] self, Tensor[] other, *, Scalar alpha=1, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.List_functional(Tensor[] self, Tensor[] other, *, Scalar alpha=1) -> (Tensor[] self_out) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.List_out(Tensor[] self, Tensor[] other, *, Scalar alpha=1, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.List_functional(Tensor[] self, Tensor[] other, *, Scalar alpha=1) -> (Tensor[] self_out) 
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.List_out(Tensor[] self, Tensor[] other, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.List_functional(Tensor[] self, Tensor[] other) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.List_out(Tensor[] self, Tensor[] other, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.List_functional(Tensor[] self, Tensor[] other) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.ScalarList_out(Tensor[] self, Scalar[] scalars, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_add.ScalarList_functional(Tensor[] self, Scalar[] scalars) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.ScalarList_out(Tensor[] self, Scalar[] scalars, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sub.ScalarList_functional(Tensor[] self, Scalar[] scalars) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.ScalarList_out(Tensor[] self, Scalar[] scalars, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_div.ScalarList_functional(Tensor[] self, Scalar[] scalars) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.ScalarList_out(Tensor[] self, Scalar[] scalars, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_mul.ScalarList_functional(Tensor[] self, Scalar[] scalars) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_zero.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_zero.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_exp.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_exp.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sqrt.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sqrt.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_abs.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_abs.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_acos.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_acos.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_asin.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_asin.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_atan.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_atan.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_ceil.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_ceil.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_cos.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_cos.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_cosh.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_cosh.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_erf.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_erf.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_erfc.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_erfc.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_expm1.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_expm1.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_floor.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_floor.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log10.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log10.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log1p.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log1p.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log2.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_log2.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_neg.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_neg.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_tan.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_tan.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_tanh.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_tanh.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sin.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sin.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sinh.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sinh.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_round.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_round.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_lgamma.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_lgamma.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_frac.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_frac.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_reciprocal.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_reciprocal.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sigmoid.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_sigmoid.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_trunc.out(Tensor[] self, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_trunc.functional(Tensor[] self) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcdiv.Scalar_out(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcdiv.Scalar_functional(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) 
-> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcmul.Scalar_out(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcmul.Scalar_functional(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar value=1) 
-> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcdiv.ScalarList_out(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcdiv.ScalarList_functional(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcmul.ScalarList_out(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars, *, Tensor[] out) -> ()
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_foreach_addcmul.ScalarList_functional(Tensor[] self, Tensor[] tensor1, Tensor[] tensor2, Scalar[] scalars) -> (Tensor[] self_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_linalg_inv_out_helper.out(Tensor self, Tensor(b!) infos_lu, Tensor(c!) infos_getri, *, Tensor(a!) out) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerDef, schema = aten::_linalg_inv_out_helper.functional(Tensor self, Tensor infos_lu, Tensor infos_getri) -> (Tensor, Tensor infos_lu_out, Tensor infos_getri_out)
[FTXJ LOG] Dispatcher::registerDef, schema = aten::get_gradients(int context_id) -> (Dict(Tensor, Tensor))
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor_mode
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out_mode
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = SparseCPU
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isnan, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sparse_matmul, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_mask_helper, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_norm, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum_backward, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax_backward_data, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax_backward_data, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_with_dims, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_with_dims_and_tensors, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (long, long, c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_mask, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_dense, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_dim, overload_name =
dispatch_key = SparseCPU
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dimI, overload_name =
dispatch_key = SparseCPU
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dense_dim, overload_name =
dispatch_key = SparseCPU
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dimV, overload_name =
dispatch_key = SparseCPU
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnz, overload_name =
dispatch_key = SparseCPU
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesce, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_coalesced, overload_name =
dispatch_key = SparseCPU
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hspmm, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hspmm, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csr, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csc, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsr, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsc, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name = 
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isinf, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name =
dispatch_key = SparseCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name = out
dispatch_key = SparseCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_physical, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = SparseCsrCPU
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isnan, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Scalar
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_sum, overload_name = dim_dtype
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_prod, overload_name = dim_dtype
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name = 
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_sampled_addmm, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_sampled_addmm, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_mask, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_dense, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnz, overload_name =
dispatch_key = SparseCsrCPU
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ccol_indices, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_indices, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse, overload_name = sparse_dim
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csr, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csc, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsr, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsc, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name = X
dispatch_key = SparseCsrCPU
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isinf, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name =
dispatch_key = SparseCsrCPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name = out
dispatch_key = SparseCsrCPU
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = ZeroTensor
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = ZeroTensor
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = ZeroTensor
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = ZeroTensor
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = ZeroTensor
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = ZeroTensor
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = ZeroTensor
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name =
dispatch_key = ZeroTensor
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_aminmax, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_aminmax, overload_name = dim
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_physical, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conv_depthwise2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_ctc_loss, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_ctc_loss, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_rnn, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, long, c10::optional<at::Tensor> const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, long, long, bool, double, bool, bool, c10::ArrayRef<long>, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_r2c, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_minimum, overload_name = List
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_dropout, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_same_storage_numel, overload_name =
dispatch_key = Autograd
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pin_memory, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sample_dirichlet, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_segment_reduce_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_backward, overload_name = grad_input
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_forward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_addmm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dim
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_standard_gamma, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_intlist, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_transform_bias_rescale_qkv, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unique, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_use_cudnn_ctc_loss, overload_name =
dispatch_key = Autograd
singature = bool (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_interface, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d_backward, overload_name = grad_input
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_backward_elemt, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binomial, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Scalar_Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_Scalar_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Scalar_Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = Autograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_backward_overrideable, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_affine_grid_generator, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_batch_norm_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution_transpose, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_grid_sampler_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_scatter, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out_mode
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_mode_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_dense_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = SymInt
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine_cachemask, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_2d_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bins_tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bin_ct
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hspmm, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::int_repr, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_pinned, overload_name =
dispatch_key = Autograd
singature = bool (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = values
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lift, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name = inverse
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_exp, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_slogdet, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name = 
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name = grad_input
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_batch_norm_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_adaptive_avg_pool2d_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_convolution, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward_weights, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool3d_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_backward, overload_name = grad_input
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_empty, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pixel_unshuffle, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = int_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qscheme, overload_name =
dispatch_key = Autograd
singature = c10::QScheme (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_max_pool1d, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = from_functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = to_functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_indices, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::segment_reduce, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, bool, 
c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_copy, overload_name = int_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Storage)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_storage_offset_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Tensor_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_storage_offset_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_mask, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name = e
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_mkldnn, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_padded_tensor, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse, overload_name = sparse_dim
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind_copy, overload_name = int_out
dispatch_key = Autograd
singature = void (at::Tensor const&, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutTensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Self
dispatch_key = Autograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Other
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Scalar_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cdist_forward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_compute_linear_combination, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conv_depthwise2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_rnn_flatten_weight, overload_name =
dispatch_key = Autograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long, long, long, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cummin_helper, overload_name =
dispatch_key = Autograd
singature = void (at::Tensor const&, at::Tensor&, at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dimV, overload_name =
dispatch_key = Autograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dirichlet_grad, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_forward_only, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_channel_affine, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2c, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_maximum, overload_name = List
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_grid_sampler_2d_cpu_fallback, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_bin_edges, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_from_bin_tensors, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_logcumsumexp, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_lstm_mps, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_convolution, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_max_pool2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_native_multi_head_attention, overload_name = 
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_from_padded_and_nested_example, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnpack_spatial_convolution, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to_copy, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_mask_helper, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_lstm_cell, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_transformer_encoder_layer_fwd, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_backward_reduce, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_gather_stats, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_stats, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = float_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_Scalar_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_tbc, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_affine_grid_generator_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_grid_sampler, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dense_dim, overload_name =
dispatch_key = Autograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dequantize, overload_name = self
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dequantize, overload_name = tensors
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_copy, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor_mode
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_mode
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, double, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name = a
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward_jvp, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histc, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isnan, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name = eigvals
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name = 
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim_max
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim_values
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_depthwise_convolution, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_reorder_conv2d_weight, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, std::array<bool, 3ul>)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_group_norm_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor
dispatch_key = Autograd
singature = at::Tensor (double, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (double, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name =
dispatch_key = Autograd
singature = at::Tensor (long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_zero_points, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_channel, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_batch_norm, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_max_pool2d, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = from_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = to_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_indices_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = src
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = reduce
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value_reduce
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_scatter, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_sampled_addmm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_sampled_addmm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name =
dispatch_key = Autograd
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csc, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name = values
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name = X
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_consecutive, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_dim, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Scalar_Self
dispatch_key = Autograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Scalar_Other
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, at::Tensor&, at::Tensor const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cdist_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cholesky_solve_helper, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_ctc_loss_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_init_dropout_state, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cummax_helper, overload_name =
dispatch_key = Autograd
singature = void (at::Tensor const&, at::Tensor&, at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_det_lu_based_helper, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_det_lu_based_helper_backward_helper, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_per_sample_weights_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_per_channel_affine_quantized, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_euclidean_dist, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_tensor_affine, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_per_tensor_affine_cachemask_tensor_qparams, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2c, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2r, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv_, overload_name = Scalar
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv_, overload_name = ScalarList
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul_, overload_name = Scalar
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul_, overload_name = ScalarList
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_norm, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name = functional
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, 
at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_local_scalar_dense, overload_name =
dispatch_key = Autograd
singature = c10::Scalar (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_reshape, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_linear, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_linear_backward_input, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_linear_backward_weights, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_new_zeros_with_same_feature_meta, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pdist_forward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_forward, overload_name = output
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_with_dims_and_tensors, overload_name =
dispatch_key = Autograd
singature = at::Tensor (long, long, c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_sum, overload_name = dim_dtype
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sparse_matmul, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_standard_gamma_grad, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_symeig_helper, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_floatlist, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_gru_cell_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_dense, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dim
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = Autograd
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_elemt, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_update_stats, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = Tensor_functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_with_logits, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bincount, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::complex, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::complex, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::count_nonzero, overload_name = dim_IntList
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::count_nonzero, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices_copy, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution_add_relu, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name = e
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_quantized, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = SymInt_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::SymIntArrayRef, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine_cachemask, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::from_file, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_jvp, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histc, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hspmm, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_coalesced, overload_name =
dispatch_key = Autograd
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor
dispatch_key = Autograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isinf, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name = L
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_convolution, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_rnn, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, long, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, long, bool, double, bool, bool, c10::ArrayRef<long>, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = values
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mps_convolution_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mps_max_pool2d_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name = output
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim_values
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nansum, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nansum, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_channel_shuffle, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_dropout, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_norm, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_empty_strided, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dtype
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name = tensor_qparams
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name = tensors
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, c10::ScalarType)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor_dynamic, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rot90, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce_, overload_name = two
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slogdet, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_dilated3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose3d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = stable
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = self_scalar
dispatch_key = Autograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = other_scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = self_scalar_out
dispatch_key = Autograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = other_scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dim
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = dim_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsc, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_copy, overload_name = int
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_copy, overload_name = int_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_indices, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = dtype
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesce, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_copy_from_and_resize, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_rnn_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<at::Tensor>, long, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, long, long, long, bool, double, bool, bool, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, at::Tensor const&, std::array<bool, 4ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_affine_quantized, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_r2c, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = Scalar
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = List
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = ScalarList
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = Scalar
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = List
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = ScalarList
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_check_errors, overload_name =
dispatch_key = Autograd
singature = void (at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_qr_helper, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_logcumsumexp, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_masked_softmax, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_from_padded, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_tensor_layer_norm, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pack_padded_sequence, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pdist_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_backward, overload_name = output_mask
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_with_dims, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_prod, overload_name = dim_dtype
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax_backward_data, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax_backward_data, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_filled_intlist, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_gru_cell, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_lstm_cell_backward_impl, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_torch_cuda_cu_linker_symbol_op, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_trilinear, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unique2, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_interface_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::affine_grid_generator, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = all_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_gather_stats_with_counts, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor_Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ccol_indices_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices_copy, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_depthwise3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool, bool)     
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution_relu, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag_embed, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar_mode
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::equal, overload_name =
dispatch_key = Autograd
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name = SymInt
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flip, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frexp, overload_name = Tensor
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_3d_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bins_tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bin_ct_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_set_to, overload_name =
dispatch_key = Autograd
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_slogdet, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name = output
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logdet, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm_mps_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> >, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name = 
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = dim
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim_min
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward_input, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mps_linear_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = SymInt
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_dropout_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_group_norm, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, 
long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = dtype_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pixel_shuffle, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_scales, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_zero_point, overload_name =
dispatch_key = Autograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::record_stream, overload_name =
dispatch_key = Autograd
singature = void (at::Tensor&, c10::Stream)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::roll, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name = grad_input
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_copy, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d_forward, overload_name = output
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_dilated2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values_stable
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = self_scalar
dispatch_key = Autograd
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = other_scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = self_scalar_out
dispatch_key = Autograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = other_scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_copy, overload_name = Tensor
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_copy, overload_name = Tensor_out
dispatch_key = Autograd
singature = void (at::Tensor const&, long, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes_copy, overload_name = out
dispatch_key = Autograd
singature = void (at::Tensor const&, c10::ArrayRef<long>, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = dim
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = IntList_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name = 
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_split, overload_name = Tensor
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name = dtype
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = dtype_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Scalar_Other
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d, overload_name = 
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_assert_async, overload_name =
dispatch_key = Autograd
singature = void (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_compute_linear_combination, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_copy_from, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dimI, overload_name =
dispatch_key = Autograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_efficientzerotensor, overload_name =
dispatch_key = Autograd
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_dense_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2r, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = Scalar
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = List
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = ScalarList
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList_out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList_functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt_, overload_name =
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = Scalar
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = List
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = ScalarList
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name = functional
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero, overload_name = out
dispatch_key = Autograd
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal_copy, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_from_bin_cts, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name = U
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual_copy, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_per_channel_quantized_tensor, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_per_tensor_quantized_tensor, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_masked_scale, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_masked_softmax_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_convolution_transpose, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_tensor_from_mask, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnz, overload_name =
dispatch_key = Autograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_warn_in_autograd, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unsafe_view, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = all_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dim
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_elemt, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not_, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor_Scalar
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ccol_indices, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::channel_shuffle, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices_copy, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::constant_pad_nd, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_overrideable, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_batch_norm, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dist, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name = output
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name = output
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frexp, overload_name = Tensor_out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name = grad_input
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss_backward, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int_out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name = X
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name = out
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_batch_norm, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_convolution_transpose, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_rnn_backward, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<at::Tensor>, long, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, long, long, bool, double, bool, bool, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, 
at::Tensor const&, std::array<bool, 4ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_adaptive_avg_pool2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool2d_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_reorder_conv3d_weight, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mps_convolution_transpose_backward, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss_backward, overload_name = grad_input
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name = output
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name = output
dispatch_key = Autograd
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::poisson, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_axis, overload_name =
dispatch_key = Autograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_scale, overload_name =
dispatch_key = Autograd
singature = double (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_Tensor
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name = decimals
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Tensor_out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_copy, overload_name = int
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_scatter, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_copy, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d_forward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose3d, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name = grad_input
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_dim, overload_name =
dispatch_key = Autograd
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes_copy, overload_name =
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_copy, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name = out
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsr, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csr, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_indices, overload_name =
dispatch_key = Autograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind_copy, overload_name = int
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform, overload_name = functional
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_dim_consecutive, overload_name =
dispatch_key = Autograd
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_split_with_sizes, overload_name =
dispatch_key = Autograd
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = vec
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex_copy, overload_name = out
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Byte, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Char, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::retains_grad, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unpack_dual, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_same_storage_numel, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_to, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_to, overload_name = ellipsis_idx
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_use_cudnn_ctc_loss, overload_name = 
dispatch_key = Tracer
singature = bool (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_ctc_loss, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_rnn, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, long, c10::optional<at::Tensor> const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, long, long, bool, double, bool, bool, c10::ArrayRef<long>, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_debug_has_internal_overlap, overload_name =
dispatch_key = Tracer
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_dropout, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_initialize_state_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_shape_as_tensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dropout, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dropout_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::real, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_physical, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::allclose, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctanh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_3d, overload_name = Sequence
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_batch_norm_impl_index, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, long> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_batch_norm_impl_index_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (long, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, std::array<bool, 3ul>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::blackman_window, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::blackman_window, overload_name = periodic
dispatch_key = Tracer
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::broadcast_tensors, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = names_out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_backward_overrideable, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution, overload_name = deprecated
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_affine_grid_generator, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_batch_norm_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution_transpose, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_grid_sampler_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = dimname_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_ctc_loss, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagflat, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_diagonal, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::true_divide_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_dense_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_sparse_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_empty, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_as, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten, overload_name = Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::ArrayRef<long>, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_2d_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool, std::array<bool, 2ul>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::group_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_distributed, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_inference, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kron, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kron, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linear, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linear, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward_weights, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_quantize_weight, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, double, long> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = names_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_aminmax, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_aminmax, overload_name = dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<long>, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim_max
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = names_dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = names_dim_max
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool1d_with_indices, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_max_pool1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_convolution, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_batch_norm_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = dimname
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = dimname_out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_backward_elemt, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, at::Tensor const&, 
at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pdist, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::moveaxis, overload_name = intlist
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::moveaxis, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pixel_unshuffle, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_pinned, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pin_memory, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pin_memory, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Device>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_with_names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn, overload_name = generator_out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = step
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ravel, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape_as, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu6, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu6_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::selu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::selu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_scatter, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = sizes
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = int
dispatch_key = Tracer
singature = long (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stride, overload_name = Dimname
dispatch_key = Tracer
singature = long (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::one_hot, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_transform_bias_rescale_qkv, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unique, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = ScalarSelf
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = ScalarOther
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_interface, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_differentiable_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_standard_gamma, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sample_dirichlet, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binomial, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum, overload_name = dim_dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_addmm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csc_tensor, overload_name = ccol_row_value_size
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsc_tensor, overload_name = ccol_row_value_size
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csc_tensor, overload_name = ccol_row_value
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsc_tensor, overload_name = ccol_row_value
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_compressed_tensor_unsafe, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_tensor_unsafe, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_unsafe, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_csr_tensor_args, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_bsr_tensor_args, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_bsc_tensor_args, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_, overload_name =
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_mask, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_cpu, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_indices, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = Dimname
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse, overload_name = sparse_dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_mkldnn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_mkldnn_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::int_repr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qscheme, overload_name =
dispatch_key = Tracer
singature = c10::QScheme (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine_cachemask, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_differentiable_lstm_cell_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_differentiable_gru_cell_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh_cell, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_gru_cell, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pack_padded_sequence_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lift, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_Tensor
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__or__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__or__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ior__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ior__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_Tensor
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor_Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Scalar_Tensor
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor_Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Scalar_Tensor
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take_along_dim, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take_along_dim, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = dimname_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero_numpy, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name = X
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapdims_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan2_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bins_tensor_out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, at::Tensor&, at::Tensor&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bins_tensor
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bin_ct_out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bin_ct
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = other
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = Scalar
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = List
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add_, overload_name = ScalarList
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_minimum, overload_name = List
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name = 
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_adaptive_avg_pool2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_enum, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::thnn_conv2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::thnn_conv2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_forward, overload_name = output
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_forward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::column_stack, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::column_stack, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfc, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logsumexp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logsumexp, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammainc, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammainc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfftn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfftn, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_exp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = ord_str
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_norm, overload_name = ord_str_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svdvals, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svdvals, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_power, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_power, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_serialization_subcmul, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_intlist, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_ambiguous_defaults, overload_name = a
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_ambiguous_defaults, overload_name = b
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::segment_reduce, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, bool, 
c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_segment_reduce_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, c10::optional<at::Tensor> const&, long)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = SymInt
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = SymInt_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::SymIntArrayRef, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_padded_tensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name = functional
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, 
at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, at::Tensor&, at::Tensor const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale, overload_name = functional
dispatch_key = Tracer
singature = std::tuple<std::vector<at::Tensor, std::allocator<at::Tensor> >, at::Tensor> (c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = Scalar_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = List_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_add, overload_name = ScalarList_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cosh, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erfc, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_round, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_lgamma, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_frac, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_trunc, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper, overload_name = functional
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Double, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Float, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Half, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_as, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::refine_names, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_use_cudnn_rnn_flatten_weight, overload_name =
dispatch_key = Tracer
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_rnn_flatten_weight, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long, long, long, long, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_ff_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_scramble_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_alpha_dropout, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_alpha_dropout_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::imag, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_conj, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resolve_neg, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool1d, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::affine_grid_generator_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arctan, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_batch_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_tbc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosine_embedding_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_affine_grid_generator_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_grid_sampler, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = dimname
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = dimname_out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cummin_helper, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, at::Tensor&, at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor_mode
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out_mode
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_mode
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar_mode
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_forward_only, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_bag, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_bag, overload_name = padding_idx
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, long, bool, c10::optional<at::Tensor> const&, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_zeros, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_grid_sampler_2d_cpu_fallback, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hann_window, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hann_window, overload_name = periodic
dispatch_key = Tracer
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic
dispatch_key = Tracer
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic_alpha
dispatch_key = Tracer
singature = at::Tensor (long, bool, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hamming_window, overload_name = periodic_alpha_beta
dispatch_key = Tracer
singature = at::Tensor (long, bool, double, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_group_norm_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, long, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2c, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2c, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_get_plan_cache_size, overload_name =
dispatch_key = Tracer
singature = long (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_get_plan_cache_max_size, overload_name =
dispatch_key = Tracer
singature = long (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isnan, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = dimname
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = dimname_out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_int8_weight_fp32_activation, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_int8_weight, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_fp16_weight_fp32_activation, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Scalar_Self
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Scalar_Other
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Scalar_Other
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutTensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Self
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Other
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = dimname_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_exp_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_max_pool2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_max_pool2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_convolution, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_depthwise_convolution, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_mask_helper, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_stats, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_gather_stats, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, std::array<bool, 3ul>)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_backward_reduce, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_vulkan_available, overload_name =
dispatch_key = Tracer
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnpack_spatial_convolution, overload_name = 
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cdist_forward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosine_similarity, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = intlist
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::movedim, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::numpy_T, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mH, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand_like, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint_like, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint_like, overload_name = low_dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name = decimals
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = int
dispatch_key = Tracer
singature = long (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::size, overload_name = Dimname
dispatch_key = Tracer
singature = long (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_scatter, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = int
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hsplit, overload_name = array
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::square, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tile, overload_name = 
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fliplr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_from_padded_and_nested_example, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fix, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_dim, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, long, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_consecutive, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vander, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dirichlet_grad, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frobenius_norm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::positive, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse_, overload_name =
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_sampled_addmm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_sampled_addmm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csr_tensor, overload_name = crow_col_value_size
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_csr_tensor, overload_name = crow_col_value
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_bsc_tensor_unsafe, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dense_dim, overload_name =
dispatch_key = Tracer
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dimV, overload_name =
dispatch_key = Tracer
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::coalesce, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_reorder_conv2d_weight, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_channel, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dequantize, overload_name = self
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dequantize, overload_name = tensors
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_zero_points, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine, overload_name = tensor_qparams
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_channel_affine, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_autocast_to_full_precision, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype_layout
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = device
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Device, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ScalarType, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to, overload_name = other
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::combinations, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::item, overload_name =
dispatch_key = Tracer
singature = c10::Scalar (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_lstm_mps, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_lstm_cell, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm, overload_name = input
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, 
bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm, overload_name = data
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru, overload_name = input
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru, overload_name = data
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh, overload_name = input
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_tanh, overload_name = data
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu_cell, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_packed_sequence, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = Dimname_Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = Dimname_Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = Dimname_Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = Dimname_Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_gather_sparse_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vander, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::swapaxes_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name = Q
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histc, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_bin_edges, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_from_bin_tensors, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantile, overload_name = scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::msort, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::msort, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argsort, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argsort, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name = values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (double, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor
dispatch_key = Tracer
singature = at::Tensor (double, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float
dispatch_key = Tracer
singature = at::Tensor (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_float_out
dispatch_key = Tracer
singature = at::Tensor& (double, double, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = Scalar
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = List
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub_, overload_name = ScalarList
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_maximum, overload_name = List
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_nd, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name = output
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward_jvp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name = output
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name = output
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pad_circular, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pad, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conv_depthwise2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conv_depthwise2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_remove_batch_dim, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erf, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erf, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = self_scalar
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = other_scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = self_scalar_out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlogy, overload_name = other_scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expit, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expit, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_sinc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_sinc, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_softmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfft, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftn, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfftn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfftn, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftfreq, overload_name = 
dispatch_key = Tracer
singature = at::Tensor (long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftfreq, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftfreq, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftfreq, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name = L
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::det, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = p_str
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cond, overload_name = p_str_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_float
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_float_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = rcond_tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = out_rcond_tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorsolve, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorsolve, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_multi_dot, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_multi_dot, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_string_default, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten_dense_tensors, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nested_tensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_indices_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_transformer_encoder_layer_fwd, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool, double, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_native_multi_head_attention, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_mode_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = from_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = from_functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = to_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = to_functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = Scalar_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = List_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sub, overload_name = ScalarList_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_acos, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_atan, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_ceil, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_erf, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log2, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Short, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_new_zeros_with_same_feature_meta, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_init_dropout_state, overload_name =
dispatch_key = Tracer
singature = at::Tensor (double, bool, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_dropout, overload_name = 
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::absolute, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dimname_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_2d, overload_name = Sequence
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = p
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bilinear, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_with_logits, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bincount, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::block_diag, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_chunk, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chunk, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = sections
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = indices
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensor_split, overload_name = tensor_indices_or_sections
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clip, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_is_acceptable, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::complex, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::complex, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose2d, overload_name = input
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::count_nonzero, overload_name = dim_IntList
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::count_nonzero, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cov, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution_add_relu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = dimname
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = dimname_out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cummax_helper, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, at::Tensor&, at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_ctc_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor 
const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diff, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diff, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, long, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarint
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<long>, long)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalararray
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = array
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarrayint
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<c10::Scalar>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = scalarrayarray
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = tensorarrayint
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gradient, overload_name = tensorarray
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::einsum, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::basic_string_view<char>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_sparse_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_per_sample_weights_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_empty_strided, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_full, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::new_ones, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_per_channel_affine_quantized, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_quantized, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m
dispatch_key = Tracer
singature = at::Tensor (long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m_out
dispatch_key = Tracer
singature = at::Tensor& (long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::from_file, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::basic_string_view<char>, c10::optional<bool>, c10::optional<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_clear_plan_cache, overload_name =
dispatch_key = Tracer
singature = void (long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_conj, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_is_zerotensor, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_nonzero, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_signed, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::layer_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, bool)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_layer_norm_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_linear, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_linear_backward_input, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_linear_backward_weights, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_linear_fp16_weight, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_quantized_matrix, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_quantized_matrix, overload_name = KN
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ldexp, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_power, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_power, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mps_max_pool2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mps_convolution_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_convolution, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_rnn, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, long, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, long, bool, double, bool, bool, c10::ArrayRef<long>, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_mm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sparse_matmul, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_update_stats, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnpack_available, overload_name =
dispatch_key = Tracer
singature = bool ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ones_like, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_euclidean_dist, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cdist_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pdist_forward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_channel_shuffle, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scalar_tensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_with_names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rand, overload_name = generator_out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator
dispatch_key = Tracer
singature = at::Tensor (long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low
dispatch_key = Tracer
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator
dispatch_key = Tracer
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (long, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = generator_out
dispatch_key = Tracer
singature = at::Tensor& (long, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_out
dispatch_key = Tracer
singature = at::Tensor& (long, long, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randint, overload_name = low_generator_out
dispatch_key = Tracer
singature = at::Tensor& (long, long, c10::ArrayRef<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randn_like, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat_interleave, overload_name = self_int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_reshape, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slogdet, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = int
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vsplit, overload_name = array
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hstack, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hstack, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::istft, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, bool, c10::optional<bool>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_DimnameList
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = IntList_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = DimnameList_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nansum, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nansum, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flipud, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rot90, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapz, overload_name = x
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapz, overload_name = dx
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triplet_margin_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, double, double, bool, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = names_dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = names_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_names
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_names_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = names_dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction_names
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm_except_dim, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_standard_gamma_grad, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_sum_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_sum, overload_name = dim_dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name = Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = dtype_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_ScalarOpt_dim_dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_ScalarOpt_dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_dtype_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = names_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<at::Dimname>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nuclear_norm, overload_name = dim_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csc_tensor_unsafe, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_coo_tensor_args, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_with_dims_and_tensors, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, long, c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_dense, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_coalesced, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hspmm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hspmm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor_dynamic, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ScalarType, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name = tensor_qparams
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantize_per_tensor, overload_name = tensors
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, c10::ScalarType)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine_cachemask, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, double, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_per_tensor_affine_cachemask_tensor_qparams, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_tensor_affine, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::choose_qparams_optimized, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cartesian_prod, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::promote_types, overload_name =
dispatch_key = Tracer
singature = c10::ScalarType (c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_local_scalar_dense, overload_name = 
dispatch_key = Tracer
singature = c10::Scalar (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_gru_cell_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu, overload_name = input
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rnn_relu, overload_name = data
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gru_cell, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_lstm_cell, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, 
c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Storage)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor_storage_offset
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = src
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = reduce
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value_reduce
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = dimname_src
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = dimname_value
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce_, overload_name = two
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__and__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__and__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__iand__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__iand__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_indices, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_equal_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::less_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name = e
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_symeig_helper, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cholesky_solve_helper, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_lu_with_info, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name = int_bins
dispatch_key = Tracer
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogramdd, overload_name = TensorList_bins
dispatch_key = Tracer
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values_stable
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = stable
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_values_stable
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = dimname_stable
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = all_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv_, overload_name = Scalar
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv_, overload_name = ScalarList
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_norm, overload_name = Scalar
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name = output
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name = output
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_jvp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_dilated3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isinf, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_digamma, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_digamma, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtr, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = self_scalar
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = other_scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = self_scalar_out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = other_scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_round, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_round, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_hfft, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ihfft2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfftn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfftn, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifftshift, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_det_lu_based_helper, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_det_lu_based_helper_backward_helper, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name = eigvals
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = str_ord
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_norm, overload_name = str_ord_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_svd, overload_name = U
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_floatlist, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unflatten_dense_tensors, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_copy, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_copy, overload_name = int_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = dtype_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = Tensor_functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = float_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, double, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Storage, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Storage)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_storage_offset_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_storage_offset_functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Tensor_functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&, at::Tensor const&, double, double, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale, overload_name = functional
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_exp, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sqrt, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log1p, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_neg, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sin, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_reciprocal, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sigmoid, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = Scalar_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcdiv, overload_name = ScalarList_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Int, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cast_Long, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rename_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rename, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ArrayRef<at::Dimname> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cudnn_rnn_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<at::Tensor>, long, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, long, long, long, bool, double, bool, bool, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, at::Tensor const&, std::array<bool, 4ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_dropout_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_dropout, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::feature_dropout_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::affine_grid_generator, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_step
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dim_arange, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsinh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arcsin, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bartlett_window, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bartlett_window, overload_name = periodic
dispatch_key = Tracer
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_with_logits_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::concat, overload_name = names_out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Dimname, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chain_matmul, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chain_matmul, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution_mode, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv1d, overload_name = 
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv1d, overload_name = padding
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv3d, overload_name = padding
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_tbc_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_transpose3d, overload_name = input
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_copy_from_and_resize, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool, bool)     
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_convolution_relu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = dimname_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumulative_trapezoid, overload_name = x
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumulative_trapezoid, overload_name = dx
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ctc_loss, overload_name = IntList
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ctc_loss, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag_embed, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name = Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname, at::Dimname, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Tensor_mode
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Tensor_mode
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = out_mode
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide, overload_name = Scalar_mode
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::divide_, overload_name = Scalar_mode
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_empty_affine_quantized, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, double, long, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output_, overload_name =
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::Device)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_like, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name = SymInt
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = using_ints
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = named_out_dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = using_names
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flatten, overload_name = DimnameList
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_3d_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool, std::array<bool, 2ul>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hinge_embedding_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_group_norm, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, 
long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_r2c, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_r2c, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_neg, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isreal, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward_input, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_linear_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mps_linear_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logdet, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_logcumsumexp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_logcumsumexp, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::value_selecting_reduction_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = names_dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = names_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmean, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmean, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim_min
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = names_dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = names_dim_min
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = SymInt
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, c10::SymInt)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_gather_stats_with_counts, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pairwise_distance, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pdist_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_H, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pixel_shuffle, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pinverse, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reshape, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_split, overload_name = Tensor
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = int
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dsplit, overload_name = array
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vstack, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vstack, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stft, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, c10::optional<bool>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stft, overload_name = center
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, c10::optional<at::Tensor> const&, bool, c10::basic_string_view<char>, bool, c10::optional<bool>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum_to_size, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = names_dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction_names
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = names_dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = names_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_names
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_names_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<at::Dimname>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Dimname)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flip, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::roll, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_from_padded, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_trilinear, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::type_as, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_has_compatible_shallow_copy_type, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unique2, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_weight_norm_interface_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zeros_like, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_csr_prod, overload_name = dim_dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_softmax_backward_data, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name = Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_log_softmax_backward_data, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frexp, overload_name = Tensor
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frexp, overload_name = Tensor_out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_bsr_tensor_unsafe, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_csc_tensor_args, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_coo_tensor_with_dims, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, long, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_dense_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesce, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_zero_point, overload_name =
dispatch_key = Tracer
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_scales, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_tensor_affine_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fake_quantize_learnable_per_channel_affine_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fused_moving_avg_obs_fake_quant, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, 
long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_choose_qparams_per_tensor, overload_name =
dispatch_key = Tracer
singature = std::tuple<double, long> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::meshgrid, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::meshgrid, overload_name = indexing
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::can_cast, overload_name =
dispatch_key = Tracer
singature = bool (c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm_mps_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> >, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, bool, long, double, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_lstm_cell_backward_impl, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_gru_cell, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_rnn_tanh_cell, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pack_padded_sequence, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_set_to, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_masked_softmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name = dtype
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__xor__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__xor__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ixor__, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ixor__, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::not_equal_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = dimname_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Dimname, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross_entropy_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name = X
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_check_errors, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = other
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::equal, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = Scalar
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = Scalar
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = List
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = List
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div_, overload_name = ScalarList
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul_, overload_name = ScalarList
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul_, overload_name = Scalar
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul_, overload_name = ScalarList
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_torch_cuda_cu_linker_symbol_op, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss_backward, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name = 
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name = output
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_backward, overload_name = output_mask
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv_depthwise3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_dilated2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isfinite, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::record_stream, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor&, c10::Stream)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expm1, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_expm1, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_exp2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_exp2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaln, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaln, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfinv, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfinv, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = self_scalar
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = other_scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = self_scalar_out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = other_scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_polygamma, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_polygamma, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log1p, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log1p, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, long, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_ifft2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_irfft2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_rfftn, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matmul, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matmul, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_slogdet, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_slogdet, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvals, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvals, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name = inverse
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inner, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inner, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorinv, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_tensorinv, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_qr_helper, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_float
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = atol_rtol_float_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = tol_tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_matrix_rank, overload_name = out_tol_tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_optional_filled_intlist, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pad_sequence, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>, bool, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_copy, overload_name = Tensor
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ccol_indices_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_copy, overload_name = Tensor_out
dispatch_key = Tracer
singature = void (at::Tensor const&, long, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = dim_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_tensor_layer_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::Device, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Device)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = Scalar_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = Scalar_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = List_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = List_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_div, overload_name = ScalarList_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_mul, overload_name = ScalarList_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_zero, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_asin, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_cos, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_floor, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tanh, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&, c10::ArrayRef<at::Tensor>)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = Scalar_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList_out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>, c10::ArrayRef<at::Tensor>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_addcmul, overload_name = ScalarList_functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>, c10::ArrayRef<c10::Scalar>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::align_tensors, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_assert_async, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_masked_scale, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sobol_engine_draw, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, at::Tensor const&, long, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_from_tensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alpha_dropout, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alpha_dropout_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::chalf, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccos, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dim
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dimname_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh, overload_name = 
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arccosh, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_1d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atleast_1d, overload_name = Sequence
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::broadcast_to, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::constant_pad_nd, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::contiguous, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::MemoryFormat)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_overrideable, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convolution_double_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conv2d, overload_name = padding
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::basic_string_view<char>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_copy_from, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::corrcoef, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cudnn_batch_norm, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mps_convolution_transpose, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mps_convolution_transpose_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, std::array<bool, 2ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummaxmin_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_diagonal_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_rowwise_prune, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_stack, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_stack, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, bool, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_embedding_bag_dense_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool, long, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name = names
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ArrayRef<at::Dimname> >, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, 
c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<long>, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::full_like, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::grid_sampler_2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_grid_sampler_2d_cpu_fallback_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name = periodic
dispatch_key = Tracer
singature = at::Tensor (long, bool, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kaiser_window, overload_name = beta
dispatch_key = Tracer
singature = at::Tensor (long, bool, double, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2r, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2r, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_cufft_set_plan_cache_max_size, overload_name =
dispatch_key = Tracer
singature = void (long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::instance_norm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isclose, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_floating_point, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_complex, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_same_size, overload_name =
dispatch_key = Tracer
singature = bool (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fbgemm_pack_gemm_matrix_fp16, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::margin_ranking_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matmul, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_rank, overload_name = tol
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_rank, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::matrix_exp, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_compute_linear_combination, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_compute_linear_combination, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_max_pool2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim_values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = names_dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = names_dim_values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim_values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = names_dim
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Dimname, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = names_dim_values
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Dimname, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_batch_norm, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_convolution_transpose, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::miopen_rnn_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, std::vector<at::Tensor, std::allocator<at::Tensor> > > (at::Tensor const&, c10::ArrayRef<at::Tensor>, long, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long, long, long, bool, double, bool, bool, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, 
at::Tensor const&, std::array<bool, 4ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multiply_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_elemt, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_elemt, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cdist, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, double, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mT, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adjoint, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::channel_shuffle, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::poisson_nll_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator
dispatch_key = Tracer
singature = at::Tensor (long, c10::optional<at::Generator>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator_out
dispatch_key = Tracer
singature = at::Tensor& (long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::negative, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::infinitely_differentiable_gelu_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_scatter, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsafe_split_with_sizes, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dstack, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dstack, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = int_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_Dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = Dimname_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Dimname, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapezoid, overload_name = x
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trapezoid, overload_name = dx
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nested_tensor_from_mask, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unique_dim_consecutive, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unsafe_view, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_efficientzerotensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::poisson, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::subtract_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_compressed_tensor, overload_name = comp_plain_value_size
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsr_tensor, overload_name = crow_col_value_size
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_compressed_tensor, overload_name = comp_plain_value
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_bsr_tensor, overload_name = crow_col_value
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = size
dispatch_key = Tracer
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = indices
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_coo_tensor, overload_name = indices_size
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_validate_sparse_compressed_tensor_args, overload_name =
dispatch_key = Tracer
singature = void (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::Layout)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear_, overload_name =
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_dense, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_dim, overload_name =
dispatch_key = Tracer
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_dimI, overload_name =
dispatch_key = Tracer
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_nnz, overload_name =
dispatch_key = Tracer
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ccol_indices, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_csr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::to_sparse_bsr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_reorder_conv3d_weight, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_scale, overload_name =
dispatch_key = Tracer
singature = double (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::q_per_channel_axis, overload_name =
dispatch_key = Tracer
singature = long (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_per_tensor_quantized_tensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_per_channel_quantized_tensor, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_tensor_affine_cachemask_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fake_quantize_per_channel_affine_cachemask_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_saturate_weight_to_fp16, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_autocast_to_reduced_precision, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, bool, bool, c10::ScalarType, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Tensor
dispatch_key = Tracer
singature = c10::ScalarType (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar
dispatch_key = Tracer
singature = c10::ScalarType (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Tensor
dispatch_key = Tracer
singature = c10::ScalarType (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::result_type, overload_name = Scalar_Scalar
dispatch_key = Tracer
singature = c10::ScalarType (c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_thnn_fused_lstm_cell_backward, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor, at::Tensor, at::Tensor> (c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstm_cell, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<at::Tensor>, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::quantized_rnn_relu_cell, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_masked_softmax_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = dimname
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Dimname, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_Tensor
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_indices, overload_name =
dispatch_key = Tracer
singature = at::Tensor (long, long, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::greater_equal_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argwhere, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name = e
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name = U
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name = a
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::orgqr, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::orgqr, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dist, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_histogramdd_from_bin_cts, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_Tensor
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanquantile, overload_name = scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, double, c10::optional<long>, bool, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = all_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power, overload_name = Tensor_Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power_, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::float_power_, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh_, overload_name =
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Scalar
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mkldnn_adaptive_avg_pool2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = vec
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose3d, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose3d, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d_forward, overload_name = output
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d_forward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col_backward, overload_name = grad_input
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col_backward, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)      
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_batch_dim, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_psi, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_psi, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logit, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_logit, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_softmax, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaincc, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_gammaincc, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_multigammaln, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_multigammaln, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft2, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fft2, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftn, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftn, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::OptionalArrayRef<long>, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fft_fftshift, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_det, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_det, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv, overload_name = 
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::outer, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::outer, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ger, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ger, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name = U
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name =
dispatch_key = Tracer
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name = out
dispatch_key = Tracer
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_test_warn_in_autograd, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_copy, overload_name = int
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_copy, overload_name = Tensor
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes_copy, overload_name =
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind_copy, overload_name = int
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias_copy, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_copy, overload_name = int_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_copy, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes_copy, overload_name = out
dispatch_key = Tracer
singature = void (at::Tensor const&, c10::ArrayRef<long>, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind_copy, overload_name = int_out
dispatch_key = Tracer
singature = void (at::Tensor const&, long, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias_copy, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear, overload_name = out
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear, overload_name = functional
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Scalar_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Tensor_out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter, overload_name = out
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_abs, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_expm1, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_log10, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_tan, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name = out
dispatch_key = Tracer
singature = void (c10::ArrayRef<at::Tensor>, c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_foreach_sinh, overload_name = functional
dispatch_key = Tracer
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&, at::Tensor const&, double, double, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_compute_linear_combination, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conj_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_conv_depthwise2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_coo_to_csr, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2r, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fused_moving_avg_obs_fq_helper, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&, double, long, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_mkldnn_transpose, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::Device)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_resize_output, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::Device, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bilinear2d_aa, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addbmm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmv, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addr, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = all_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::aminmax, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<long>, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift_, overload_name = Tensor_Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_right_shift, overload_name = Tensor_Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bucketize, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cauchy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::celu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col2im, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::conj_physical, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::deg2rad, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar_mode
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out_mode
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_mode_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eig, overload_name = e
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_divide, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool2d, overload_name = output
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geometric, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::heaviside, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histc, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bins_tensor_out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, bool, at::Tensor&, at::Tensor&)[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::histogram, overload_name = bin_ct_out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, c10::optional<c10::ArrayRef<double> >, c10::optional<at::Tensor> const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hspmm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hypot, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igammac, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::indices_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isneginf, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = values
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lcm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name = eigvals
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_householder_product, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_factor_ex, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_ldl_solve, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lstsq, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<double>, c10::optional<c10::basic_string_view<char> >, at::Tensor&, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu_factor_ex, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_slogdet, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_solve_triangular, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_vector_norm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::OptionalArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_normal, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp2, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logit, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logspace, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_unpack, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim_min
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multi_margin_loss, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_forward, overload_name = output
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multinomial, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mvlgamma, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nansum, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name = output
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name = output
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (double, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ormqr, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = int_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rad2deg, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = from_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = to_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, long, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::renorm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, long, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name = decimals
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = decimals_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::row_indices, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce_, overload_name = two
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_reduce, overload_name = two_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinc, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice_copy, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv3d_forward, overload_name = output
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softmax, overload_name = int_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values_stable
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize_and_clear, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_resize, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, long, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_erfcx, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i1e, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_log_ndtr, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = self_scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_xlog1py, overload_name = other_scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_copy, overload_name = int_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unfold_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_trilinear3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::vdot, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_real_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Scalar_Other
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutTensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Self
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutScalar_Other
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_add_relu, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_addmm_activation, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_coalesced, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_convert_indices_from_csr_to_coo, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_c2c, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fft_r2c, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_indices_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_inv_out_helper, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_linalg_svd, overload_name = U
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_logcumsumexp, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_neg_view, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_reshape_alias_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_slow_conv2d_forward, overload_name = output
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_sparse_broadcast_to_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_stack, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_bicubic2d_aa_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact1d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_upsample_nearest_exact3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_values_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_avg_pool3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::angle, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = all_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::batch_norm_elemt, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor const&, at::Tensor const&, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = float_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift_, overload_name = Tensor_Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_left_shift, overload_name = Tensor_Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ccol_indices, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_inverse, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky_solve, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::col_indices_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::complex, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_sparse_to_sparse, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copysign, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::crow_indices_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummax, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cummin, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::digamma, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_renorm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, double, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp2, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name = SymInt
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, c10::SymIntArrayRef, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = SymInt_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::SymIntArrayRef, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmax, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmin, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fractional_max_pool3d, overload_name = output
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frexp, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gcd, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::geqrf, overload_name = a
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::glu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss_backward, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::huber_loss, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::i0, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::igamma, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::im2col_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill, overload_name = int_Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_reduce, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Tensor_Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isin, overload_name = Scalar_Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isposinf, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lgamma, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cholesky_ex, overload_name = L
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_cross, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eig, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigvalsh, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_inv_ex, overload_name = inverse
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_lu, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_pinv, overload_name = atol_rtol_tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_qr, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name = output
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_softmax, overload_name = int_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logaddexp, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logcumsumexp, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lstsq, overload_name = X
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lu_solve, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim_max
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::median, overload_name = dim_values
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mode, overload_name = values
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::multilabel_margin_loss_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nanmedian, overload_name = dim_values
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::narrow_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name = out
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nextafter, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = dtype_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polar, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::polygamma, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::randperm, overload_name = generator_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (long, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::range, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad1d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_sparse, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = src
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = reduce
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value_reduce
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::searchsorted, overload_name = Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, bool, bool, c10::optional<c10::basic_string_view<char> >, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select_copy, overload_name = int_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Storage)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Storage_storage_offset
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name = source_Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Storage, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Storage_storage_offset_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Storage, long, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = source_Tensor_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::signbit, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_, overload_name = 
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slow_conv_transpose3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::soft_margin_loss_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sparse_sampled_addmm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_entr, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_i0e, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_ndtri, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = self_scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::special_zeta, overload_name = other_scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = ADInplaceOrView
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dim
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_copy, overload_name = dim_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sspaddmm, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Scalar
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = IntList_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name = e
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tensordot, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name = values
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name = X
dispatch_key = ADInplaceOrView
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = ADInplaceOrView
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, double, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bicubic2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_linear1d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d_backward, overload_name = grad_input
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest1d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest3d, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)       
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::values_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name = dtype
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_as_complex, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view_copy, overload_name = dtype_out
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor const&, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerDef, schema = profiler::_record_function_enter(str name, str? args=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = profiler::_record_function_enter, overload_name =
singature = at::Tensor (std::string const&, c10::optional<std::string> const&)
[FTXJ LOG] Dispatcher::registerDef, schema = profiler::_record_function_enter_new(str name, str? args=None) -> (__torch__.torch.classes.profiler._RecordFunction)
[FTXJ LOG] Dispatcher::registerImpl, op_name = profiler::_record_function_enter_new, overload_name =
singature = c10::intrusive_ptr<torch::autograd::profiler::PythonRecordFunction, c10::detail::intrusive_target_default_null_type<torch::autograd::profiler::PythonRecordFunction> > (std::string const&, c10::optional<std::string> const&)
[FTXJ LOG] Dispatcher::registerDef, schema = profiler::_record_function_exit(Tensor _0) -> ()
[FTXJ LOG] Dispatcher::registerImpl, op_name = profiler::_record_function_exit, overload_name =
singature = void (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerDef, schema = profiler::_record_function_exit._RecordFunction(__torch__.torch.classes.profiler._RecordFunction _0) -> ()  
[FTXJ LOG] Dispatcher::registerImpl, op_name = profiler::_record_function_exit, overload_name = _RecordFunction
singature = void (c10::intrusive_ptr<torch::autograd::profiler::PythonRecordFunction, c10::detail::intrusive_target_default_null_type<torch::autograd::profiler::PythonRecordFunction> > const&)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::permute_copy(Tensor self, int[] dims) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::reshape_copy(Tensor self, int[] shape) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::flatten_copy.using_ints(Tensor self, int start_dim=0, int end_dim=-1) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::expand_dims_copy(Tensor input, int[] dims) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::to_maybe_copy_out.prim_dtype(Tensor self, int? dtype=None, bool non_blocking=False, bool copy=False) -> (Tensor, bool)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::to_maybe_copy_out.dtype(Tensor self, int dtype, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor, bool)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::to_maybe_copy_out.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor, bool)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::to_copy.prim_dtype(Tensor self, int? dtype=None, bool non_blocking=False, bool copy=False) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::to_copy.dtype(Tensor self, int dtype, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::to_copy.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1.0000000000000001e-05, bool cudnn_enable=True) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::signed_log1p(Tensor input) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::dict_unpack(...) -> (...)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::VarTupleUnpack(...) -> (...)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::fused_equally_split(Tensor input, int num_split, int dim) -> (...)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::dequantize_copy.self(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::select_tensor(Tensor(a) a, Tensor(b) b, bool use_b) -> (Tensor(b|a))
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::create_owned_ref(...) -> (...)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, 
int mode=0, bool sparse=False, Tensor? per_sample_weights=None, bool include_last_offset=False) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::embedding_bag.padding_idx(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights, bool include_last_offset, int? padding_idx) -> (Tensor, Tensor, Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = static_runtime::clamp_nan_to_num(Tensor input, Scalar? min, Scalar? max, float? nan, float? posinf, float? posinf) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = _test::leaky_relu(Tensor self, float v=0.01) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _test::leaky_relu, overload_name =
singature = at::Tensor (at::Tensor const&, double)
[FTXJ LOG] Dispatcher::registerDef, schema = _test::cat(Tensor[] inputs) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _test::cat, overload_name =
singature = at::Tensor (c10::List<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerDef, schema = _test::get_first(str[][] _0) -> (str _0)
[FTXJ LOG] Dispatcher::registerImpl, op_name = _test::get_first, overload_name =
singature = std::string (c10::List<c10::List<std::string> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_, overload_name =
dispatch_key = Tracer
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = Tracer
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = Tracer
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_backward, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::set_data, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::data, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::is_leaf, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::output_nr, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_version, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::requires_grad_, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::retain_grad, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual, overload_name =
dispatch_key = Tracer
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = Autograd
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_as_, overload_name =
dispatch_key = Autograd
singature = at::Tensor const& (at::Tensor const&, at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = Autograd
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual, overload_name =
dispatch_key = Autograd
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::copy_, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor& (at::Tensor&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::detach, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_fw_primal, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_make_dual, overload_name =
dispatch_key = ADInplaceOrView
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerDef, schema = quantization::_Bfloat16QuantizedToFloat(Tensor input) -> (Tensor)
[FTXJ LOG] Dispatcher::registerDef, schema = quantization::_FloatToBfloat16Quantized(Tensor input) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantization::_Bfloat16QuantizedToFloat, overload_name =
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = quantization::_FloatToBfloat16Quantized, overload_name = 
dispatch_key = CPU
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::get_gradients, overload_name =
singature = c10::Dict<at::Tensor, at::Tensor> (long)
[FTXJ LOG] Dispatcher::registerDef, schema = prims::abs(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::abs, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::abs, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::acos(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::acos, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::acos, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::acosh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::acosh, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::acosh, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::asin(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::asin, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::asin, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::atan(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::atan, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::atan, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::cos(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::cos, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::cos, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::cosh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::cosh, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::cosh, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::bessel_i0e(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bessel_i0e, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bessel_i0e, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::bessel_i1e(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bessel_i1e, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bessel_i1e, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::bitwise_not(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bitwise_not, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bitwise_not, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::cbrt(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::cbrt, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::cbrt, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::ceil(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::ceil, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::ceil, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::digamma(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::digamma, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::digamma, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::erf(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::erf, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::erf, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::erf_inv(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::erf_inv, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::erf_inv, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::erfc(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::erfc, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::erfc, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::exp(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::exp, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::exp, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::expm1(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::expm1, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::expm1, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::floor(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::floor, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::floor, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::is_finite(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::is_finite, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::is_finite, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::is_infinite(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::is_infinite, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::is_infinite, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::lgamma(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::lgamma, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::lgamma, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::log(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::log, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::log, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::log1p(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::log1p, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::log1p, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::log2(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::log2, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::log2, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::reciprocal(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::reciprocal, overload_name = 
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::reciprocal, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::neg(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::neg, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::neg, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::round(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::round, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::round, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::sign(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sign, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sign, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::sin(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sin, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sin, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::sinh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sinh, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sinh, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::sqrt(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sqrt, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sqrt, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::square(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::square, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::square, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::tan(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::tan, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::tan, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::tanh(Tensor self) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::tanh, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::tanh, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::add(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::add, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::add, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::atan2(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::atan2, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::atan2, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::bitwise_and(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bitwise_and, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bitwise_and, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::bitwise_or(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bitwise_or, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bitwise_or, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::bitwise_xor(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bitwise_xor, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::bitwise_xor, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::div(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::div, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::div, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::eq(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::eq, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::eq, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::ge(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::ge, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::ge, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::gt(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::gt, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::gt, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::igamma(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::igamma, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::igamma, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::igammac(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::igammac, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::igammac, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::le(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::le, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::le, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::lt(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::lt, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::lt, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::maximum(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::maximum, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::maximum, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::minimum(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::minimum, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::minimum, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::mul(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::mul, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::mul, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::ne(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::ne, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::ne, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::nextafter(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::nextafter, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::nextafter, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::pow(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::pow, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::pow, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::rsqrt(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::rsqrt, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::rsqrt, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::shift_left(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::shift_left, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::shift_left, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::shift_right_arithmetic(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::shift_right_arithmetic, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::shift_right_arithmetic, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::sub(Tensor self, Tensor other) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sub, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sub, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::as_strided(Tensor(a!) a, int[] size, int[] stride, int storage_offset) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::as_strided, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::as_strided, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::broadcast_in_dim(Tensor(a) a, int[] shape, int[] broadcast_dimensions) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::broadcast_in_dim, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::broadcast_in_dim, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::collapse_view(Tensor(a) a, int start, int end) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::collapse_view, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::collapse_view, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::slice(Tensor(a) a, int[] start_indices, int[] limit_indices, int[]? strides=None) -> (Tensor(a))     
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::slice, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::slice, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::slice_in_dim(Tensor(a) a, int start_index, int limit_index, int stride=1, int axis=0) -> (Tensor(a)) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::slice_in_dim, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::slice_in_dim, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::split_dim(Tensor(a) a, int dim, int outer_length) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::split_dim, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::split_dim, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::squeeze(Tensor(a) a, int[] dimensions) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::squeeze, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::squeeze, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::transpose(Tensor(a) a, int[] permutation) -> (Tensor(a))
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::transpose, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::transpose, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::view_of(Tensor(a) a) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::view_of, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::view_of, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::concatenate(Tensor[] tensors, int dim) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::concatenate, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::concatenate, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::reshape(Tensor a, int[] shape) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::reshape, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::reshape, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::rev(Tensor a, int[] dims) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::rev, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::rev, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::select(Tensor pred, Tensor a, Tensor b) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::select, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::select, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::clone(Tensor a, *, int memory_format) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::clone, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::clone, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::convert_element_type(Tensor a, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::convert_element_type, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::convert_element_type, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::device_put(Tensor a, Device device) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::device_put, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::device_put, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::to_dtype(Tensor a, int dtype) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::to_dtype, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::to_dtype, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::copy_to(Tensor(a!) a, Tensor b) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::copy_to, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::copy_to, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::resize(Tensor(a!) a, int[] shape) -> (Tensor(a!))
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::resize, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::resize, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::sum(Tensor inp, int[]? dims, *, int? output_dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sum, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::sum, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::prod(Tensor inp, int[]? dims, *, int? output_dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::prod, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::prod, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::amax(Tensor inp, int[]? dims, *, int? output_dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::amax, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::amax, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::amin(Tensor inp, int[]? dims, *, int? output_dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::amin, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::amin, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::all(Tensor inp, int[]? dims, *, int? output_dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::all, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::all, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::any(Tensor inp, int[]? dims, *, int? output_dtype=None) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::any, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::any, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::empty(int[] shape, *, int dtype, Device device, bool requires_grad) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::empty, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::empty, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::empty_like(Tensor a, *, int dtype, Device device, bool requires_grad) -> (Tensor)
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::empty_like, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::empty_like, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::full(int[] shape, Scalar fill_value, *, int dtype, Device device, bool requires_grad) -> (Tensor)    
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::full, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::full, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerDef, schema = prims::full_like(Tensor a, Scalar fill_value, *, int dtype, Device device, bool requires_grad) -> (Tensor)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::full_like, overload_name =
dispatch_key = CompositeExplicitAutograd
[FTXJ LOG] Dispatcher::registerImpl, op_name = prims::full_like, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = out
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linalg_eigh, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d, overload_name =
dispatch_key = Meta
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d, overload_name =
dispatch_key = AutogradXLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d, overload_name =
dispatch_key = AutogradXLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::abs_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sgn_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acos_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::add_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = dim
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = dim
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::arange, overload_name = start_out
dispatch_key = XLA
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmax, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::argmin, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::acosh_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asinh_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atanh_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::as_strided_, overload_name =
dispatch_key = XLA
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::asin_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::baddbmm_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bernoulli_, overload_name = float
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::binary_cross_entropy_with_logits, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_not, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_not_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_xor_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_and_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logical_or_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bmm, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name =
dispatch_key = XLA
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cat, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ceil_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::optional<c10::Scalar> const&, c10::optional<c10::Scalar> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_max, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clamp_min, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::constant_pad_nd, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_overrideable, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::convolution_backward_overrideable, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::ArrayRef<long>, long, std::array<bool, 3ul>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_copy_from, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_copy_from_and_resize, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cos_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cosh_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumprod_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cumsum_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diagonal, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Tensor_mode
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = out_mode
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Tensor_mode
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::optional<c10::basic_string_view<char> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::div_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::dot, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::embedding_dense_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = memory_format
dispatch_key = XLA
singature = at::Tensor (c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::resize_, overload_name =
dispatch_key = XLA
singature = at::Tensor const& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::empty_strided, overload_name =
dispatch_key = XLA
singature = at::Tensor (c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erf_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfc_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exp_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expm1_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::expand, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eye, overload_name = m_out
dispatch_key = XLA
singature = at::Tensor& (long, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fill_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::floor_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::frac_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::List<c10::optional<at::Tensor> > const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_copy_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_put_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_index_put_impl_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::List<c10::optional<at::Tensor> > const&, at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::inverse, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::isnan, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kl_div_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::kthvalue, overload_name = values
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::optional<double>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nan_to_num_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::optional<double>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name =
dispatch_key = XLA
singature = at::Tensor (c10::Scalar const&, c10::Scalar const&, long, c10::optional<c10::ScalarType>, c10::optional<c10::Layout>, c10::optional<c10::Device>, c10::optional<bool>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::linspace, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (c10::Scalar const&, c10::Scalar const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log10_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log1p_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log2_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy, overload_name = OutTensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::xlogy_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logdet, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_log_softmax_backward_data, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::logsumexp, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name = dim_max
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amax, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = dim
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mean, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name = dim_min
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::amin, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mm, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mul_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mv, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm, overload_name = out
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, double, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::native_batch_norm_backward, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, c10::optional<at::Tensor> const&, bool, double, std::array<bool, 3ul>)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::permute, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reciprocal_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::neg_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::repeat, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::round_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::relu_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prelu, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gelu_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardshrink_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsqrt_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::select, overload_name = int
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name = 
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::silu_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mish_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sin_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sinh_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slice, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, c10::optional<long>, c10::optional<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::slogdet, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_softmax_backward_data, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split, overload_name = Tensor
dispatch_key = XLA
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::split_with_sizes, overload_name =
dispatch_key = XLA
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze, overload_name = dim
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::squeeze_, overload_name = dim
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name =
dispatch_key = XLA
singature = at::Tensor (c10::ArrayRef<at::Tensor>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::stack, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (c10::ArrayRef<at::Tensor>, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = dim_IntList
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sum, overload_name = IntList_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sqrt_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = dim
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std, overload_name = correction_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::std_mean, overload_name = correction
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = dim_int
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::prod, overload_name = int_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, bool, c10::optional<c10::ScalarType>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::t_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tan_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = 
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::threshold_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose, overload_name = int
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::transpose_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::flip, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::roll, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_trilinear, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trunc_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_unsafe_view, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unsqueeze_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var, overload_name = correction_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::var_mean, overload_name = correction
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::where, overload_name = self_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dtype
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim_dtype
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = dtype_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, c10::ScalarType, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = ScalarOpt_dim
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::norm, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::optional<c10::Scalar> const&, c10::ArrayRef<long>, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::clone, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::optional<c10::MemoryFormat>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::zero_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sub_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rsub, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addmm_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_to_cpu, overload_name = 
dispatch_key = XLA
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (c10::ArrayRef<at::Tensor>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::unbind, overload_name = int
dispatch_key = XLA
singature = std::vector<at::Tensor, std::allocator<at::Tensor> > (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_local_scalar_dense, overload_name =
dispatch_key = XLA
singature = c10::Scalar (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_pack_padded_sequence, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_fill_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_scatter_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::view, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::put_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_add_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_fill_, overload_name = int_Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = src_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = src
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = reduce_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = reduce
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter, overload_name = value_reduce_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_, overload_name = value_reduce
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, c10::Scalar const&, c10::basic_string_view<char>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::scatter_add_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::eq_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_and_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_or, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::bitwise_xor, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__lshift__, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__ilshift__, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__rshift__, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::__irshift__, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tril_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triu_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lerp_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = from
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, c10::optional<long>, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name = to
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, long, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::random_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::uniform_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::exponential_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::diag, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cross, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::trace, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ne_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ge_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::le_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gt_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::lt_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::take, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::index_select, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::masked_select, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nonzero, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, long, at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::gather, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, long, at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcmul_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::addcdiv_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, bool, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::triangular_solve, overload_name = X
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, bool, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::symeig, overload_name = e
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor, at::Tensor> (at::Tensor const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::svd, overload_name = U
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&, at::Tensor&> (at::Tensor const&, bool, bool, at::Tensor&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::cholesky, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::qr, overload_name = Q
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::erfinv_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sign_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::atan2_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::fmod_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder, overload_name = Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::remainder_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::min, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::maximum, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::minimum, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = stable
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::optional<bool>, long, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sort, overload_name = values_stable
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::optional<bool>, long, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, long, long, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::topk, overload_name = values
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, long, long, bool, bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::all, overload_name = all_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::any, overload_name = all_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Tensor
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor (c10::Scalar const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Scalar_out
dispatch_key = XLA
singature = at::Tensor& (c10::Scalar const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow, overload_name = Tensor_Scalar_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::pow_, overload_name = Scalar
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, double, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, double, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_float_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, double, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor
dispatch_key = XLA
singature = at::Tensor (double, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = float_Tensor_out
dispatch_key = XLA
singature = at::Tensor& (double, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::normal, overload_name = Tensor_Tensor_out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::optional<at::Generator>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::alias, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_foreach_non_finite_check_and_unscale_, overload_name =
dispatch_key = XLA
singature = void (c10::ArrayRef<at::Tensor>, at::Tensor&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_amp_update_scale_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor&, at::Tensor const&, double, double, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::mse_loss_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::l1_loss_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_forward, overload_name = output
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_forward, overload_name = output
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&)        
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::nll_loss2d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::optional<at::Tensor> const&, long, long, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::smooth_l1_loss_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, long, double, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::elu_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, c10::Scalar const&, bool, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardsigmoid_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardtanh_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::hardswish_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::leaky_relu_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, bool, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_forward, overload_name = output
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::log_sigmoid_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>, at::Tensor&)  
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_, overload_name =
dispatch_key = XLA
singature = at::Tensor& (at::Tensor&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, c10::optional<at::Generator>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::rrelu_with_noise_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, bool, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softplus_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::Scalar const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::softshrink_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::Scalar const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool2d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::_adaptive_avg_pool3d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d, overload_name = out
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::adaptive_max_pool2d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool2d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&) 
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::avg_pool3d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, bool, c10::optional<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices, overload_name = out
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool2d_with_indices_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name =
dispatch_key = XLA
singature = std::tuple<at::Tensor, at::Tensor> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices, overload_name = out
dispatch_key = XLA
singature = std::tuple<at::Tensor&, at::Tensor&> (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, 
bool, at::Tensor&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_pool3d_with_indices_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, 
at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool2d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::max_unpool3d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::reflection_pad2d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad1d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::replication_pad2d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, c10::ArrayRef<long>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = vec
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = vec
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::OptionalArrayRef<long>, c10::ArrayRef<long>, c10::optional<c10::ArrayRef<double> >)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_bilinear2d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, bool, c10::optional<double>, c10::optional<double>, at::Tensor&)   
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::upsample_nearest2d_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, c10::ArrayRef<long>, c10::ArrayRef<long>, c10::optional<double>, c10::optional<double>, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::sigmoid_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::tanh_backward, overload_name = grad_input
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ger, overload_name =
dispatch_key = XLA
singature = at::Tensor (at::Tensor const&, at::Tensor const&)
[FTXJ LOG] Dispatcher::registerImpl, op_name = aten::ger, overload_name = out
dispatch_key = XLA
singature = at::Tensor& (at::Tensor const&, at::Tensor const&, at::Tensor&)
[FTXJ LOG] InitXlaModuleBindings